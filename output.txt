No files changed, compilation skipped

Ran 4 tests for test/integration/BusinessScenarios.t.sol:BusinessScenariosTest
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_CreatorEarningsFlow() (gas: 13405)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [13405] BusinessScenariosTest::test_CreatorEarningsFlow()
    ├─ [3225] MockERC20::mint(0x0000000000000000000000000000000000002001, 10000000 [1e7])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_CreatorOnboardingFlow() (gas: 8936)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [8936] BusinessScenariosTest::test_CreatorOnboardingFlow()
    ├─ [3225] MockERC20::mint(0x0000000000000000000000000000000000004001, 100000000 [1e8])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

[PASS] test_PlatformStatistics() (gas: 362077)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UserSubscriptionLifecycle() (gas: 647292)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Suite result: FAILED. 2 passed; 2 failed; 0 skipped; finished in 6.69ms (1.46ms CPU time)

Ran 6 tests for test/integration/EndToEndFlow.t.sol:EndToEndFlowTest
[FAIL: InvalidAutoRenewalConfig()] test_AutoRenewalIntegration_Success() (gas: 667639)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [667639] EndToEndFlowTest::test_AutoRenewalIntegration_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 15000000 [1.5e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 15000000 [1.5e7])
    │   └─ ← [Return] true
    ├─ [22334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 0, contentCount: 2, subscriberCount: 0, registrationTime: 1, profileData: "Premium Content Creator", isSuspended: false })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [3321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [578236] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [92001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [7808] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 0, 0)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   └─ ← [Revert] InvalidAutoRenewalConfig()
    └─ ← [Revert] InvalidAutoRenewalConfig()

[FAIL: QuoteReverted()] test_CommerceProtocolIntegration_CustomToken() (gas: 1552474)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [1552474] EndToEndFlowTest::test_CommerceProtocolIntegration_CustomToken()
    ├─ [1138080] → new MockERC20@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: EndToEndFlowTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000002002, 100000000000000000000 [1e20])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 100000000000000000000 [1e20])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 100000000000000000000 [1e20])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 100000000000000000000 [1e20])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [289490] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 1, creator: 0x0000000000000000000000000000000000001002, contentId: 0, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 150, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 10000000 [1e7], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(10000000 [1e7])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 5000000000000000 [5e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[PASS] test_CompleteCreatorJourney_Success() (gas: 1499899)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ContentModerationIntegration_Success() (gas: 1977364)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_CrossContractConsistency_Success() (gas: 1451101)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_MultiCreatorPlatformAnalytics_Success() (gas: 2395961)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Suite result: FAILED. 4 passed; 2 failed; 0 skipped; finished in 8.46ms (4.07ms CPU time)

Ran 11 tests for test/integration/CrossContractInteraction.t.sol:CrossContractInteractionTest
[PASS] testContentId1() (gas: 2516)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] testContentId2() (gas: 2581)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] test_AdminRoleChanges_GlobalEffects() (gas: 17609)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [17609] CrossContractInteractionTest::test_AdminRoleChanges_GlobalEffects()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [442] CreatorRegistry::DEFAULT_ADMIN_ROLE() [staticcall]
    │   └─ ← [Return] 0x0000000000000000000000000000000000000000000000000000000000000000
    ├─ [5754] CreatorRegistry::grantRole(0x0000000000000000000000000000000000000000000000000000000000000000, 0x0000000000000000000000000000000000009998)
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)
    └─ ← [Revert] AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)

[PASS] test_ContentDeactivation_AccessControlConsistency() (gas: 1286873)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ContentPriceUpdate_AffectsPaymentSystems() (gas: 1095453)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: next call did not revert as expected] test_CreatorDeactivation_CascadeEffects() (gas: 1600232)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [1600232] CrossContractInteractionTest::test_CreatorDeactivation_CascadeEffects()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [549798] PayPerView::purchaseContentDirect(1)
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 995000000 [9.95e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [27388] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [7931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 1000000 [1e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5])
    │   └─ ← [Stop]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27069] CreatorRegistry::deactivateCreator(0x0000000000000000000000000000000000001001)
    │   ├─ emit CreatorSuspended(creator: 0x0000000000000000000000000000000000001001, suspended: true)
    │   └─ ← [Stop]
    ├─ [12463] CreatorRegistry::getCreatorWithActive(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 5850000 [5.85e6], contentCount: 2, subscriberCount: 1, registrationTime: 1, profileData: "Cross-Test Creator 1", isSuspended: true }), false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Creator not active)
    │   └─ ← [Return]
    ├─ [287536] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [6401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    └─ ← [Revert] next call did not revert as expected

[PASS] test_CreatorProfileUpdate_PropagatesCorrectly() (gas: 1546444)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: Invalid signer] test_PaymentFailure_StateConsistency() (gas: 489664)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [489664] CrossContractInteractionTest::test_PaymentFailure_StateConsistency()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [420000] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 970000 [9.7e5], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 970000 [9.7e5], platformFee: 25000 [2.5e4], operatorFee: 5000, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0xcdbb867b8c9c22245971a7b7112e81b06ae313400426e2dce572ea1914b29f96, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 1000000 [1e6], creatorAmount: 970000 [9.7e5], platformFee: 25000 [2.5e4], operatorFee: 5000, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 1000000 [1e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 970000 [9.7e5], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 30000 [3e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 25000 [2.5e4], creatorAmount: 970000 [9.7e5], operatorFee: 5000, timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 1000000 [1e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003003)
    │   └─ ← [Return]
    ├─ [10766] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0x746573740000000000000000000000000000000000000000000000000000000073696700000000000000000000000000000000000000000000000000000000001b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0xcdbb867b8c9c22245971a7b7112e81b06ae313400426e2dce572ea1914b29f96, 27, 52647538817385212172903286807934654968315727694643370704309751478220717293568, 52202207408751084445608630439303342083744614197414295667518036957185502609408) [staticcall]
    │   │   └─ ← [Return]
    │   └─ ← [Revert] Invalid signer
    └─ ← [Revert] Invalid signer

[FAIL: assertion failed: 3 != 0] test_PlatformWideOperations_Consistency() (gas: 3505699)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [3505699] CrossContractInteractionTest::test_PlatformWideOperations_Consistency()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001003)
    │   └─ ← [Return]
    ├─ [162204] CreatorRegistry::registerCreator(15000000 [1.5e7], "Third Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001003, subscriptionPrice: 15000000 [1.5e7], timestamp: 1, profileData: "Third Creator")
    │   └─ ← [Stop]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001003) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001003)
    │   └─ ← [Return]
    ├─ [344474] ContentRegistry::registerContent("QmTestHash", "Expensive Content", "Test description", 0, 5000000 [5e6], [])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001003) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [24347] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001003, 0, 1, 0)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentRegistered(contentId: 3, creator: 0x0000000000000000000000000000000000001003, ipfsHash: "QmTestHash", title: "Expensive Content", category: 0, payPerViewPrice: 5000000 [5e6], timestamp: 1)
    │   └─ ← [Return] 3
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 20000000 [2e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 20000000 [2e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 25000000 [2.5e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 25000000 [2.5e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [586236] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 20000000 [2e7]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [396236] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001002)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 995000000 [9.95e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 15000000 [1.5e7]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 10000000 [1e7])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 10000000 [1e7])
    │   │   └─ ← [Return] true
    │   ├─ [72101] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 9750000 [9.75e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001002, amount: 9750000 [9.75e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001002, price: 10000000 [1e7], platformFee: 250000 [2.5e5], creatorEarning: 9750000 [9.75e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [436836] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001003)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001003) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001003) [staticcall]
    │   │   └─ ← [Return] 15000000 [1.5e7]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(15000000 [1.5e7]) [staticcall]
    │   │   └─ ← [Return] 375000 [3.75e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 25000000 [2.5e7]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 15000000 [1.5e7])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 15000000 [1.5e7])
    │   │   └─ ← [Return] true
    │   ├─ [68101] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001003, 14625000 [1.462e7], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001003, amount: 14625000 [1.462e7], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001003, price: 15000000 [1.5e7], platformFee: 375000 [3.75e5], creatorEarning: 14625000 [1.462e7], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 10000000 [1e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 10000000 [1e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 10000000 [1e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 10000000 [1e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [545298] PayPerView::purchaseContentDirect(1)
    │   ├─ [31702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 985000000 [9.85e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [27388] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [7931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 1000000 [1e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [359998] PayPerView::purchaseContentDirect(3)
    │   ├─ [7702] ContentRegistry::getContent(3) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001003, ipfsHash: "QmTestHash", title: "Expensive Content", description: "Test description", category: 0, payPerViewPrice: 5000000 [5e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001003) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 984000000 [9.84e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 9000000 [9e6]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [5931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001003, 4875000 [4.875e6], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001003, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [68825] ContentRegistry::recordPurchase(3, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 3, buyer: 0x0000000000000000000000000000000000002001, price: 5000000 [5e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 3, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001003, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [405898] PayPerView::purchaseContentDirect(2)
    │   ├─ [31702] ContentRegistry::getContent(2) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Premium Guide", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 985000000 [9.85e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 3000000 [3e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 3000000 [3e6])
    │   │   └─ ← [Return] true
    │   ├─ [5931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2925000 [2.925e6], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2925000 [2.925e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [68825] ContentRegistry::recordPurchase(2, 0x0000000000000000000000000000000000002002)
    │   │   ├─ emit ContentPurchased(contentId: 2, buyer: 0x0000000000000000000000000000000000002002, price: 3000000 [3e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 2, buyer: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, price: 3000000 [3e6], platformFee: 75000 [7.5e4], creatorEarning: 2925000 [2.925e6])
    │   └─ ← [Stop]
    ├─ [5415] SubscriptionManager::getPlatformSubscriptionMetrics() [staticcall]
    │   └─ ← [Return] 3, 30000000 [3e7], 750000 [7.5e5], 0, 0
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(30000000 [3e7], 30000000 [3e7]) [staticcall]
    │   └─ ← [Return]
    ├─ [25327] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Return] 3, 3, [3, 0, 0, 0, 0], [3, 0, 0, 0, 0]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [14334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 8775000 [8.775e6], contentCount: 2, subscriberCount: 1, registrationTime: 1, profileData: "Cross-Test Creator 1", isSuspended: false })
    ├─ [14334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001002) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 10000000 [1e7], isVerified: false, totalEarnings: 9750000 [9.75e6], contentCount: 0, subscriberCount: 1, registrationTime: 1, profileData: "Cross-Test Creator 2", isSuspended: false })
    ├─ [4334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001003) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 15000000 [1.5e7], isVerified: false, totalEarnings: 19500000 [1.95e7], contentCount: 1, subscriberCount: 1, registrationTime: 1, profileData: "Third Creator", isSuspended: false })
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::warp(2592002 [2.592e6])
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001002) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002002, 0x0000000000000000000000000000000000001003) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(3, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(2, 0x0000000000000000000000000000000000002002) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1415] SubscriptionManager::getPlatformSubscriptionMetrics() [staticcall]
    │   └─ ← [Return] 3, 30000000 [3e7], 750000 [7.5e5], 0, 0
    ├─ [0] VM::assertEq(3, 0) [staticcall]
    │   └─ ← [Revert] assertion failed: 3 != 0
    └─ ← [Revert] assertion failed: 3 != 0

[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] test_RoleChanges_CrossContractPermissions() (gas: 160146)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [160146] CrossContractInteractionTest::test_RoleChanges_CrossContractPermissions()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27566] ContentRegistry::grantPurchaseRecorderRole(CrossContractInteractionTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: CrossContractInteractionTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [76825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 1000000 [1e6], timestamp: 1)
    │   └─ ← [Stop]
    ├─ [25702] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 1, tags: [], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [438] ContentRegistry::PURCHASE_RECORDER_ROLE() [staticcall]
    │   └─ ← [Return] 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565
    ├─ [5731] ContentRegistry::revokeRole(0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, CrossContractInteractionTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)
    └─ ← [Revert] AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)

[FAIL: AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c)] test_SubscriptionRenewal_MultiContractUpdate() (gas: 757760)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [757760] CrossContractInteractionTest::test_SubscriptionRenewal_MultiContractUpdate()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 15000000 [1.5e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 15000000 [1.5e7])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 15000000 [1.5e7]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [75612] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 10000000 [1e7], 0)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 10000000 [1e7], depositAmount: 0)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [14334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 4875000 [4.875e6], contentCount: 2, subscriberCount: 1, registrationTime: 1, profileData: "Cross-Test Creator 1", isSuspended: false })
    ├─ [5261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 0, 0
    ├─ [1194] SubscriptionManager::getCreatorSubscriptionEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 4875000 [4.875e6], 4875000 [4.875e6]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 5000000 [5e6], lastPayment: 5000000 [5e6] })
    ├─ [0] VM::warp(2592002 [2.592e6])
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [3556] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c)
    └─ ← [Revert] AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c)

Suite result: FAILED. 5 passed; 6 failed; 0 skipped; finished in 10.73ms (6.00ms CPU time)

Ran 36 tests for test/unit/PayPerView.t.sol:PayPerViewTest
[PASS] testContentId1() (gas: 2583)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] testContentId2() (gas: 2559)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_CanPurchaseContent_Success() (gas: 680000)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_CompletePurchase_ExpiredIntent() (gas: 444069)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: next call did not revert as expected] test_CompletePurchase_InsufficientPayment() (gas: 995088)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [995088] PayPerViewTest::test_CompletePurchase_InsufficientPayment()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [393791] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [171572] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   ├─ [118942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(100000 [1e5])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 50000000000000 [5e13]
    │   │   ├─ [9143] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 500000000000000000000000000 [5e26], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient payment)
    │   └─ ← [Return]
    ├─ [554532] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 100999 [1.009e5], true, "")
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [75631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 100999 [1.009e5], paymentToken: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913)
    │   └─ ← [Stop]
    └─ ← [Revert] next call did not revert as expected

[PASS] test_CompletePurchase_PaymentFailed() (gas: 619230)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: log != expected log] test_CompletePurchase_Success() (gas: 1003678)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [1003678] PayPerViewTest::test_CompletePurchase_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [393791] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [171572] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   ├─ [118942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(100000 [1e5])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 50000000000000 [5e13]
    │   │   ├─ [9143] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 500000000000000000000000000 [5e26], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 101000 [1.01e5], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966])
    ├─ [554532] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], true, "")
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [75631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 101000 [1.01e5], paymentToken: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_CreatePurchaseIntent_AlreadyPurchased() (gas: 694499)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_CreatePurchaseIntent_ETH() (gas: 257163)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_CreatePurchaseIntent_NonExistentContent() (gas: 25839)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [25839] PayPerViewTest::test_CreatePurchaseIntent_NonExistentContent()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [14122] PayPerView::createPurchaseIntent(999, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[FAIL: QuoteReverted()] test_CreatePurchaseIntent_OtherToken() (gas: 381067)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [381067] PayPerViewTest::test_CreatePurchaseIntent_OtherToken()
    ├─ [23482] MockQuoterV2::setMockPrice(0x0000000000000000000000000000000000001234, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000, 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [336707] PayPerView::createPurchaseIntent(1, 3, 0x0000000000000000000000000000000000001234, 200)
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [256225] PriceOracle::getTokenAmountForUSDC(0x0000000000000000000000000000000000001234, 100000 [1e5], 0)
    │   │   ├─ [118714] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000001234, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x0000000000000000000000000000000000001234 TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(100000 [1e5])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 50000000000000 [5e13]
    │   │   ├─ [97970] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000001234, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x0000000000000000000000000000000000001234 TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: assertion failed: 101000 != 100000] test_CreatePurchaseIntent_USDC() (gas: 415599)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [415599] PayPerViewTest::test_CreatePurchaseIntent_USDC()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, true, false)
    │   └─ ← [Return]
    ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0x00000000000000000000000000000000, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 100000 [1e5])
    ├─ [393791] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [171572] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   ├─ [118942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(100000 [1e5])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 50000000000000 [5e13]
    │   │   ├─ [9143] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 500000000000000000000000000 [5e26], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(101000 [1.01e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Revert] assertion failed: 101000 != 100000
    └─ ← [Revert] assertion failed: 101000 != 100000

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_GetPaymentOptions_NonExistentContent() (gas: 14822)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [14822] PayPerViewTest::test_GetPaymentOptions_NonExistentContent()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [6378] PayPerView::getPaymentOptions(999)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[PASS] test_GetPaymentOptions_Success() (gas: 106605)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_HandleExternalRefund_NoPurchase() (gas: 52860)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_HandleExternalRefund_Success() (gas: 650943)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_MultiplePurchases_Success() (gas: 1114954)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PauseUnpause_Success() (gas: 693893)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PaymentProcessorRole_Access() (gas: 992425)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PaymentProcessorRole_Unauthorized() (gas: 413680)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PurchaseContentDirect_AlreadyPurchased() (gas: 719938)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PurchaseContentDirect_InactiveContent() (gas: 122527)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PurchaseContentDirect_InsufficientAllowance() (gas: 118314)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_PurchaseContentDirect_InsufficientBalance() (gas: 11118)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [11118] PayPerViewTest::test_PurchaseContentDirect_InsufficientBalance()
    ├─ [3202] MockERC20::forceBalance(0x0000000000000000000000000000000000002001, 99999 [9.999e4])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_PurchaseContentDirect_NonExistentContent() (gas: 56451)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [56451] PayPerViewTest::test_PurchaseContentDirect_NonExistentContent()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [13581] PayPerView::purchaseContentDirect(999)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[PASS] test_PurchaseContentDirect_Success() (gas: 713408)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PurchaseIsolation_Success() (gas: 1045461)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: Error != expected error: Invalid intent ID format != Content not active] test_RecordExternalPurchase_InactiveContent() (gas: 94531)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [94531] PayPerViewTest::test_RecordExternalPurchase_InactiveContent()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [32671] ContentRegistry::updateContent(1, 0, false)
    │   ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not active)
    │   └─ ← [Return]
    ├─ [7334] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0x00000000000000000000000000000000, 100000 [1e5], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000 [1e5])
    │   └─ ← [Revert] Invalid intent ID format
    └─ ← [Revert] Error != expected error: Invalid intent ID format != Content not active

[PASS] test_RecordExternalPurchase_Success() (gas: 628671)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RecordExternalPurchase_Unauthorized() (gas: 20448)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RequestRefund_AlreadyRefunded() (gas: 872653)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RequestRefund_NoPurchase() (gas: 24837)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RequestRefund_Success() (gas: 871998)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RequestRefund_WindowExpired() (gas: 680828)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_WithdrawEarnings_NoEarnings() (gas: 19119)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawEarnings_Success() (gas: 697701)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [697701] PayPerViewTest::test_WithdrawEarnings_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [650698] PayPerView::purchaseContentDirect(1)
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [1225] MockERC20::mint(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 97500 [9.75e4])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

Suite result: FAILED. 26 passed; 10 failed; 0 skipped; finished in 17.15ms (14.15ms CPU time)

Ran 14 tests for test/unit/CommerceProtocolIntegration.t.sol:CommerceProtocolIntegrationTest
[PASS] test_ContentRegistration_Success() (gas: 347848)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

[PASS] test_EIP712Compliance_IndustryStandards() (gas: 824159)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

[FAIL: User context corrupted by MEV: 0x0000000000000000000000000000000000002001 != 0x00000000000000000000000000000000dEADFAcE] test_FrontRunningDefense_MEVResistance() (gas: 994077)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [994077] CommerceProtocolIntegrationTest::test_FrontRunningDefense_MEVResistance()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 10000000000000000000 [1e19])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 10000000000000000000 [1e19])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [464164] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 500, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [38426] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 3000000 [3e6], 0)
    │   │   ├─ [30187] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 500) [staticcall]
    │   │   └─ ← [Return] 3150000000000000000 [3.15e18]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], expectedAmount: 3150000000000000000 [3.15e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3150000000000000000 [3.15e18], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [49643] MockERC20::mint(0x00000000000000000000000000000000dEADFAcE, 1000000000000000000000 [1e21])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x00000000000000000000000000000000dEADFAcE, value: 1000000000000000000000 [1e21])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x00000000000000000000000000000000dEADFAcE)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 100000000000000000000 [1e20])
    │   ├─ emit Approval(owner: 0x00000000000000000000000000000000dEADFAcE, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 100000000000000000000 [1e20])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x00000000000000000000000000000000dEADFAcE)
    │   └─ ← [Return]
    ├─ [368364] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 500, deadline: 3601 }))
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [8026] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 3000000 [3e6], 0)
    │   │   ├─ [4287] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 500) [staticcall]
    │   │   └─ ← [Return] 3150000000000000000 [3.15e18]
    │   ├─ emit IntentFinalized(intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e, intentHash: 0x4d91a0018459970b8be4cbce9094fc76baecfce6e3e12594e2d1c724c70d50a4, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], expectedAmount: 3150000000000000000 [3.15e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x00000000000000000000000000000000dEADFAcE, feeAmount: 90000 [9e4], id: 0xe8e591fcb5634d1cbc9a595bfb78241e, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x00000000000000000000000000000000dEADFAcE, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b }), PaymentContext({ paymentType: 0, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3150000000000000000 [3.15e18], intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e })
    ├─ [0] VM::assertTrue(true, "Intent IDs not unique - vulnerable to front-running") [staticcall]
    │   └─ ← [Return]
    ├─ [4536] CommerceProtocolIntegration::getPaymentContext(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3150000000000000000 [3.15e18], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [4536] CommerceProtocolIntegration::getPaymentContext(0xe8e591fcb5634d1cbc9a595bfb78241e) [staticcall]
    │   └─ ← [Return] PaymentContext({ paymentType: 0, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3150000000000000000 [3.15e18], intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e })
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000002001, 0x00000000000000000000000000000000dEADFAcE, "User context corrupted by MEV") [staticcall]
    │   └─ ← [Revert] User context corrupted by MEV: 0x0000000000000000000000000000000000002001 != 0x00000000000000000000000000000000dEADFAcE
    └─ ← [Revert] User context corrupted by MEV: 0x0000000000000000000000000000000000002001 != 0x00000000000000000000000000000000dEADFAcE

[FAIL: Creator earnings don't match calculations: 2910375 != 94500000] test_PaymentCalculations_MathematicalPrecision() (gas: 1288239)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [1288239] CommerceProtocolIntegrationTest::test_PaymentCalculations_MathematicalPrecision()
    ├─ [0] VM::assertEq(5000000 [5e6], 5000000 [5e6], "Platform fee calculation incorrect") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(500000 [5e5], 500000 [5e5], "Operator fee calculation incorrect") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(94500000 [9.45e7], 94500000 [9.45e7], "Creator amount calculation incorrect") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 100000000 [1e8])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 100000000 [1e8])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [420000] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14421] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [648599] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000000 [1e8], true, "")
    │   ├─ [11596] PayPerView::completePurchase(0xd65c44ffd18370b995cea9ed13756093, 100000000 [1e8], true, "")
    │   │   └─ ← [Revert] Intent not found
    │   ├─ [536293] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0xd65c44ffd18370b995cea9ed13756093, 2985000 [2.985e6], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000000 [1e8])
    │   │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   │   ├─ [1232] CreatorRegistry::calculatePlatformFee(2985000 [2.985e6]) [staticcall]
    │   │   │   └─ ← [Return] 74625 [7.462e4]
    │   │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 3000000 [3e6], timestamp: 1)
    │   │   │   └─ ← [Stop]
    │   │   ├─ [78901] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910375 [2.91e6], 1, 0)
    │   │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910375 [2.91e6], source: "platform_activity")
    │   │   │   └─ ← [Stop]
    │   │   ├─ emit ExternalPurchaseRecorded(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, intentId: 0xd65c44ffd18370b995cea9ed13756093, usdcPrice: 2985000 [2.985e6], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], actualAmountPaid: 100000000 [1e8])
    │   │   └─ ← [Stop]
    │   ├─ emit ContentAccessGranted(user: 0x0000000000000000000000000000000000002001, contentId: 1, intentId: 0xd65c44ffd18370b995cea9ed13756093, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 100000000 [1e8])
    │   ├─ [8401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910000 [2.91e6], 1, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910000 [2.91e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 100000000 [1e8], success: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 2910375 [2.91e6], 2910375 [2.91e6]
    ├─ [0] VM::assertEq(2910375 [2.91e6], 94500000 [9.45e7], "Creator earnings don't match calculations") [staticcall]
    │   └─ ← [Revert] Creator earnings don't match calculations: 2910375 != 94500000
    └─ ← [Revert] Creator earnings don't match calculations: 2910375 != 94500000

[FAIL: VOL tokens not deducted correctly: 0 != 20000000000000000000] test_PaymentExecution_MultiTokenComplexity() (gas: 1338982)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [1338982] CommerceProtocolIntegrationTest::test_PaymentExecution_MultiTokenComplexity()
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 0
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 20000000000000000000 [2e19])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 20000000000000000000 [2e19])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [464164] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 300, deadline: 2701 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [38426] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 3000000 [3e6], 0)
    │   │   ├─ [30187] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 300) [staticcall]
    │   │   └─ ← [Return] 3090000000000000000 [3.09e18]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 2701)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], deadline: 2701, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0xbc58edf9b4f44b4f328b0b1eb7e9cf95affbc28b18a201e1f791f8af44cda0ff, deadline: 2701)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], expectedAmount: 3090000000000000000 [3.09e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 2701, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3090000000000000000 [3.09e18], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0xbc58edf9b4f44b4f328b0b1eb7e9cf95affbc28b18a201e1f791f8af44cda0ff
    ├─ [0] VM::sign("<pk>", 0xbc58edf9b4f44b4f328b0b1eb7e9cf95affbc28b18a201e1f791f8af44cda0ff) [staticcall]
    │   └─ ← [Return] 27, 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc269, 0x73bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e056
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc26973bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e0561b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0xbc58edf9b4f44b4f328b0b1eb7e9cf95affbc28b18a201e1f791f8af44cda0ff, 27, 23322677197840360691716684572411093108410250671851533435712048430279799128681, 52348217665138058010014719931229941206324393797754657752298149581090393284694) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc26973bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e0561b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14421] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc26973bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e0561b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 2701, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc26973bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e0561b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [648599] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 20000000000000000000 [2e19], true, "")
    │   ├─ [11596] PayPerView::completePurchase(0xd65c44ffd18370b995cea9ed13756093, 20000000000000000000 [2e19], true, "")
    │   │   └─ ← [Revert] Intent not found
    │   ├─ [536293] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0xd65c44ffd18370b995cea9ed13756093, 2985000 [2.985e6], MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 20000000000000000000 [2e19])
    │   │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   │   ├─ [1232] CreatorRegistry::calculatePlatformFee(2985000 [2.985e6]) [staticcall]
    │   │   │   └─ ← [Return] 74625 [7.462e4]
    │   │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 3000000 [3e6], timestamp: 1)
    │   │   │   └─ ← [Stop]
    │   │   ├─ [78901] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910375 [2.91e6], 1, 0)
    │   │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910375 [2.91e6], source: "platform_activity")
    │   │   │   └─ ← [Stop]
    │   │   ├─ emit ExternalPurchaseRecorded(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, intentId: 0xd65c44ffd18370b995cea9ed13756093, usdcPrice: 2985000 [2.985e6], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], actualAmountPaid: 20000000000000000000 [2e19])
    │   │   └─ ← [Stop]
    │   ├─ emit ContentAccessGranted(user: 0x0000000000000000000000000000000000002001, contentId: 1, intentId: 0xd65c44ffd18370b995cea9ed13756093, paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], amountPaid: 20000000000000000000 [2e19])
    │   ├─ [8401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910000 [2.91e6], 1, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910000 [2.91e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], amountPaid: 20000000000000000000 [2e19], success: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 0
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [0] VM::assertEq(0, 20000000000000000000 [2e19], "VOL tokens not deducted correctly") [staticcall]
    │   └─ ← [Revert] VOL tokens not deducted correctly: 0 != 20000000000000000000
    └─ ← [Revert] VOL tokens not deducted correctly: 0 != 20000000000000000000

[FAIL: Incorrect amount deducted from user: 0 != 3000000] test_PaymentExecution_NormalConditions() (gas: 1358011)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [1358011] CommerceProtocolIntegrationTest::test_PaymentExecution_NormalConditions()
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [5261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 0, 0
    ├─ [33327] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Return] 2, 2, [2, 0, 0, 0, 0], [2, 0, 0, 0, 0]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [417500] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14421] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [642099] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000000 [3e6], true, "")
    │   ├─ [11596] PayPerView::completePurchase(0xd65c44ffd18370b995cea9ed13756093, 3000000 [3e6], true, "")
    │   │   └─ ← [Revert] Intent not found
    │   ├─ [532293] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0xd65c44ffd18370b995cea9ed13756093, 2985000 [2.985e6], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000000 [3e6])
    │   │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   │   ├─ [1232] CreatorRegistry::calculatePlatformFee(2985000 [2.985e6]) [staticcall]
    │   │   │   └─ ← [Return] 74625 [7.462e4]
    │   │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 3000000 [3e6], timestamp: 1)
    │   │   │   └─ ← [Stop]
    │   │   ├─ [78901] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910375 [2.91e6], 1, 0)
    │   │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910375 [2.91e6], source: "platform_activity")
    │   │   │   └─ ← [Stop]
    │   │   ├─ emit ExternalPurchaseRecorded(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, intentId: 0xd65c44ffd18370b995cea9ed13756093, usdcPrice: 2985000 [2.985e6], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], actualAmountPaid: 3000000 [3e6])
    │   │   └─ ← [Stop]
    │   ├─ emit ContentAccessGranted(user: 0x0000000000000000000000000000000000002001, contentId: 1, intentId: 0xd65c44ffd18370b995cea9ed13756093, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 3000000 [3e6])
    │   ├─ [8401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910000 [2.91e6], 1, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910000 [2.91e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 3000000 [3e6], success: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [1261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 2910375 [2.91e6], 2910375 [2.91e6]
    ├─ [9327] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Return] 2, 2, [2, 0, 0, 0, 0], [2, 0, 0, 0, 0]
    ├─ [0] VM::assertEq(0, 3000000 [3e6], "Incorrect amount deducted from user") [staticcall]
    │   └─ ← [Revert] Incorrect amount deducted from user: 0 != 3000000
    └─ ← [Revert] Incorrect amount deducted from user: 0 != 3000000

[FAIL: Refund not properly recorded: 0x0000000000000000000000000000000000000000000000000000000000000000 != 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000] test_PaymentFailureRecovery_GracefulDegradation() (gas: 963957)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [963957] CommerceProtocolIntegrationTest::test_PaymentFailureRecovery_GracefulDegradation()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [420000] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14421] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [176893] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000000 [3e6], false, "External system error")
    │   ├─ emit RefundRequested(intentId: 0xbe72efc4694d9da8a06956e375bea7b8, user: 0x0000000000000000000000000000000000002001, amount: 3000000 [3e6], reason: "External system error")
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 3000000 [3e6], success: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [928] CommerceProtocolIntegration::hasActiveIntent(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false, "Failed intent not cleaned up") [staticcall]
    │   └─ ← [Return]
    ├─ [3277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false, "Access granted despite payment failure") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [127189] CommerceProtocolIntegration::requestRefund(0xd65c44ffd18370b995cea9ed13756093, "Payment processing failed")
    │   ├─ emit RefundRequested(intentId: 0x8d4483128cda9404c5278f95f8363eff, user: 0x0000000000000000000000000000000000002001, amount: 3000000 [3e6], reason: "Payment processing failed")
    │   └─ ← [Stop]
    ├─ [12861] CommerceProtocolIntegration::refundRequests(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x00000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0, "", 0, false
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000000000000000000000000000000000, 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000, "Refund not properly recorded") [staticcall]
    │   └─ ← [Revert] Refund not properly recorded: 0x0000000000000000000000000000000000000000000000000000000000000000 != 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000
    └─ ← [Revert] Refund not properly recorded: 0x0000000000000000000000000000000000000000000000000000000000000000 != 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000

[FAIL: Error != expected error: InvalidContentId() != InvalidContent()] test_PaymentIntentCreation_ComprehensiveValidation() (gas: 556038)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [556038] CommerceProtocolIntegrationTest::test_PaymentIntentCreation_ComprehensiveValidation()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 6000000000000000000 [6e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 6000000000000000000 [6e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [464164] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 200, deadline: 1801 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [38426] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 3000000 [3e6], 0)
    │   │   ├─ [30187] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 200) [staticcall]
    │   │   └─ ← [Return] 3060000000000000000 [3.06e18]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 1801)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], deadline: 1801, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x7ae9e13c34079567ea19c30c8ae090353e428ee92e78c0eff23d53b6b82d4552, deadline: 1801)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], expectedAmount: 3060000000000000000 [3.06e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 1801, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3060000000000000000 [3.06e18], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1801, 1801) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: cb6e534400000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [9506] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000009999, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 200, deadline: 1801 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000009999) [staticcall]
    │   │   └─ ← [Return] false
    │   └─ ← [Revert] InvalidCreator()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: ab4142cf00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [8932] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 999999 [9.999e5], paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 200, deadline: 1801 }))
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [980] ContentRegistry::getContent(999999 [9.999e5]) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != InvalidContent()

[PASS] test_PaymentIntentCreation_Success() (gas: 443270)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

[FAIL: next call did not revert as expected] test_ReentrancyDefense_MultiVectorAttacks() (gas: 866104)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [866104] CommerceProtocolIntegrationTest::test_ReentrancyDefense_MultiVectorAttacks()
    ├─ [0] VM::startPrank(0x00000000000000000000000000000000DeaDBeef)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000000 [1e21])
    │   ├─ emit Approval(owner: 0x00000000000000000000000000000000DeaDBeef, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000000 [1e21])
    │   └─ ← [Return] true
    ├─ [464164] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [38426] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 3000000 [3e6], 0)
    │   │   ├─ [30187] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 100) [staticcall]
    │   │   └─ ← [Return] 3030000000000000000 [3.03e18]
    │   ├─ emit IntentFinalized(intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f, intentHash: 0xe82ba8672457f789b1cf6de374d381c8eceed5e49b4dec0376b9065ce10dae22, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], expectedAmount: 3030000000000000000 [3.03e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x00000000000000000000000000000000DeaDBeef, feeAmount: 90000 [9e4], id: 0x6b1857f7d4cd6093dee84bbbdb1f131f, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x00000000000000000000000000000000DeaDBeef, token: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f }), PaymentContext({ paymentType: 0, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, expectedAmount: 3030000000000000000 [3.03e18], intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f })
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [346464] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [8026] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 3000000 [3e6], 0)
    │   │   ├─ [4287] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 100) [staticcall]
    │   │   └─ ← [Return] 3030000000000000000 [3.03e18]
    │   ├─ emit IntentFinalized(intentId: 0xdc33548a668b1a0de9b12966abc48cf2, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xdc33548a668b1a0de9b12966abc48cf2, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xdc33548a668b1a0de9b12966abc48cf2, intentHash: 0x13adf294d790c3f08c1b86bdcefdb7eb8c0c46f14d0f07bba12708f5f3155365, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xdc33548a668b1a0de9b12966abc48cf2, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], expectedAmount: 3030000000000000000 [3.03e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x00000000000000000000000000000000DeaDBeef, feeAmount: 90000 [9e4], id: 0xdc33548a668b1a0de9b12966abc48cf2, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x00000000000000000000000000000000DeaDBeef, token: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f }), PaymentContext({ paymentType: 0, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, expectedAmount: 3030000000000000000 [3.03e18], intentId: 0xdc33548a668b1a0de9b12966abc48cf2 })
    └─ ← [Revert] next call did not revert as expected

[FAIL: next call did not revert as expected] test_RoleManagement_Success() (gas: 49729)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [49729] CommerceProtocolIntegrationTest::test_RoleManagement_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [393] CommerceProtocolIntegration::SIGNER_ROLE() [staticcall]
    │   └─ ← [Return] 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70
    ├─ [30103] CommerceProtocolIntegration::grantRole(0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, 0x0000000000000000000000000000000000009999)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000009999, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [393] CommerceProtocolIntegration::SIGNER_ROLE() [staticcall]
    │   └─ ← [Return] 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70
    ├─ [1234] CommerceProtocolIntegration::hasRole(0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, 0x0000000000000000000000000000000000009999) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [393] CommerceProtocolIntegration::SIGNER_ROLE() [staticcall]
    │   └─ ← [Return] 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70
    └─ ← [Revert] next call did not revert as expected

[FAIL: next call did not revert as expected] test_SignatureReplayDefense_ComprehensiveProtection() (gas: 1814680)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [1814680] CommerceProtocolIntegrationTest::test_SignatureReplayDefense_ComprehensiveProtection()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [420000] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14421] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [648599] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000000 [3e6], true, "")
    │   ├─ [11596] PayPerView::completePurchase(0xd65c44ffd18370b995cea9ed13756093, 3000000 [3e6], true, "")
    │   │   └─ ← [Revert] Intent not found
    │   ├─ [536293] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0xd65c44ffd18370b995cea9ed13756093, 2985000 [2.985e6], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000000 [3e6])
    │   │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   │   ├─ [1232] CreatorRegistry::calculatePlatformFee(2985000 [2.985e6]) [staticcall]
    │   │   │   └─ ← [Return] 74625 [7.462e4]
    │   │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 3000000 [3e6], timestamp: 1)
    │   │   │   └─ ← [Stop]
    │   │   ├─ [78901] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910375 [2.91e6], 1, 0)
    │   │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910375 [2.91e6], source: "platform_activity")
    │   │   │   └─ ← [Stop]
    │   │   ├─ emit ExternalPurchaseRecorded(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, intentId: 0xd65c44ffd18370b995cea9ed13756093, usdcPrice: 2985000 [2.985e6], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], actualAmountPaid: 3000000 [3e6])
    │   │   └─ ← [Stop]
    │   ├─ emit ContentAccessGranted(user: 0x0000000000000000000000000000000000002001, contentId: 1, intentId: 0xd65c44ffd18370b995cea9ed13756093, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 3000000 [3e6])
    │   ├─ [8401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910000 [2.91e6], 1, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910000 [2.91e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 3000000 [3e6], success: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 100000000 [1e8])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 100000000 [1e8])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [357100] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 1, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 1, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0x62192eda444f198c7fa4a1d16729db97, user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0x62192eda444f198c7fa4a1d16729db97, user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0x62192eda444f198c7fa4a1d16729db97, intentHash: 0xc48e97f00d68d8bedc8bf271e7b32f2dd6a7d6816291e2533a43fafc99ac241a, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0x62192eda444f198c7fa4a1d16729db97, user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002002, feeAmount: 90000 [9e4], id: 0x62192eda444f198c7fa4a1d16729db97, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002002, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0x62192eda444f198c7fa4a1d16729db97 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0x62192eda444f198c7fa4a1d16729db97) [staticcall]
    │   └─ ← [Return] 0xc48e97f00d68d8bedc8bf271e7b32f2dd6a7d6816291e2533a43fafc99ac241a
    ├─ [0] VM::sign("<pk>", 0xc48e97f00d68d8bedc8bf271e7b32f2dd6a7d6816291e2533a43fafc99ac241a) [staticcall]
    │   └─ ← [Return] 28, 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877, 0x255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f
    ├─ [0] VM::startPrank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [119252] CommerceProtocolIntegration::provideIntentSignature(0x62192eda444f198c7fa4a1d16729db97, 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f1c)
    │   ├─ [3000] PRECOMPILES::ecrecover(0xc48e97f00d68d8bedc8bf271e7b32f2dd6a7d6816291e2533a43fafc99ac241a, 28, 41148952279581397429142093024850209147523081160897668751225478448801896671351, 16902246452867072127088043140463337345065091325958609252556355550157408235407) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0x62192eda444f198c7fa4a1d16729db97, signature: 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f1c)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 8baa579f00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [14421] CommerceProtocolIntegration::executePaymentWithSignature(0x62192eda444f198c7fa4a1d16729db97)
    │   ├─ emit IntentReadyForExecution(intentId: 0x62192eda444f198c7fa4a1d16729db97, signature: 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f1c)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002002, feeAmount: 90000 [9e4], id: 0x62192eda444f198c7fa4a1d16729db97, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f1c, prefix: 0x, sender: 0x0000000000000000000000000000000000002002, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    └─ ← [Revert] next call did not revert as expected

[FAIL: Error != expected error: AccessControlUnauthorizedAccount(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122, 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70) != UnauthorizedSigner()] test_SignatureSystem_CryptographicSecurity() (gas: 620010)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [620010] CommerceProtocolIntegrationTest::test_SignatureSystem_CryptographicSecurity()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [420000] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::assertTrue(true, "Intent hash not stored") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [903] CommerceProtocolIntegration::intentReadyForExecution(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "Valid signature rejected") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::sign("<pk>", 0x1d21356f216675f792c9c1f31e46bc363744c67c73f57631ebaa318a43a55c13) [staticcall]
    │   └─ ← [Return] 27, 0x47048828689149a3c3576bb83d28096b192ad7d4f9ad4dd5afb395a58ca22b1c, 0x3ea7e0e4fc86f17265191633dee4aa36932856ba5cc224d74bba25688ddfce37
    ├─ [0] VM::startPrank(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: ca31867a00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [3981] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0x47048828689149a3c3576bb83d28096b192ad7d4f9ad4dd5afb395a58ca22b1c3ea7e0e4fc86f17265191633dee4aa36932856ba5cc224d74bba25688ddfce371b)
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122, 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70)
    └─ ← [Revert] Error != expected error: AccessControlUnauthorizedAccount(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122, 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70) != UnauthorizedSigner()

[FAIL: InvalidContent()] test_SystemLoad_StressConditions() (gas: 817072)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [817072] CommerceProtocolIntegrationTest::test_SystemLoad_StressConditions()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [32543] MockERC20::mint(0x0000000000000000000000000000000000009000, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009000, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009003, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009003, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009004, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009004, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009005, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009005, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009006, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009006, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009007, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009007, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009008, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009008, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009009, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009009, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000009000)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000009000, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000009000)
    │   └─ ← [Return]
    ├─ [368844] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 1, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 7201 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ emit IntentFinalized(intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814, user: 0x0000000000000000000000000000000000009000, creator: 0x0000000000000000000000000000000000001001, paymentType: 1, amount: 9700000 [9.7e6], deadline: 7201)
    │   ├─ emit IntentAuditRecord(intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814, user: 0x0000000000000000000000000000000000009000, creator: 0x0000000000000000000000000000000000001001, paymentType: 1, creatorAmount: 9700000 [9.7e6], platformFee: 250000 [2.5e5], operatorFee: 50000 [5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 7201, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814, intentHash: 0x7df427f9cc035067f58c2766dbef0c84ea9ad8a8d47fa0d12bed65742671971e, deadline: 7201)
    │   ├─ emit PaymentIntentCreated(intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814, user: 0x0000000000000000000000000000000000009000, creator: 0x0000000000000000000000000000000000001001, paymentType: 1, totalAmount: 10000000 [1e7], creatorAmount: 9700000 [9.7e6], platformFee: 250000 [2.5e5], operatorFee: 50000 [5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 10000000 [1e7])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 9700000 [9.7e6], deadline: 7201, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000009000, feeAmount: 300000 [3e5], id: 0xe4a1f71f5d87aa6d6f857b86d735f814, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000009000, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 1, user: 0x0000000000000000000000000000000000009000, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 250000 [2.5e5], creatorAmount: 9700000 [9.7e6], operatorFee: 50000 [5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 10000000 [1e7], intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814 })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000009001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 2000000 [2e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000009001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 2000000 [2e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000009001)
    │   └─ ← [Return]
    ├─ [51287] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001002, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 7201 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   └─ ← [Revert] InvalidContent()
    └─ ← [Revert] InvalidContent()

Suite result: FAILED. 3 passed; 11 failed; 0 skipped; finished in 18.01ms (14.73ms CPU time)

Ran 27 tests for test/unit/CreatorRegistry.t.sol:CreatorRegistryTest
[PASS] test_FeeCalculation_Various() (gas: 22741)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetPlatformStats_Success() (gas: 661190)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_InvalidCreatorAddress_Handling() (gas: 24967)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_MultipleCreators_Success() (gas: 377105)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PauseUnpause_Success() (gas: 366636)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterCreator_AlreadyRegistered() (gas: 199297)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterCreator_EmptyProfileData() (gas: 27170)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterCreator_MaximumPrice() (gas: 237865)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterCreator_MinimumPrice() (gas: 237844)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterCreator_PriceTooHigh() (gas: 27544)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterCreator_PriceTooLow() (gas: 31352)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterCreator_Success() (gas: 259556)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SetCreatorVerification_OnlyModerator() (gas: 206181)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SetCreatorVerification_RemoveVerification() (gas: 234559)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SetCreatorVerification_Success() (gas: 279656)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateCreatorStats_OnlyPlatformContract() (gas: 198766)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateCreatorStats_Success() (gas: 352426)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdatePlatformFee_OnlyOwner() (gas: 18063)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdatePlatformFee_Success() (gas: 27544)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdatePlatformFee_TooHigh() (gas: 18028)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: assertion failed] test_UpdateProfileData_EmptyData() (gas: 208536)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [208536] CreatorRegistryTest::test_UpdateProfileData_EmptyData()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(1000000 [1e6], "Test Profile 1")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Test Profile 1")
    │   └─ ← [Stop]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: e1e909d000000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [4630] CreatorRegistry::updateProfileData("")
    │   └─ ← [Revert] InvalidProfileData()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [4334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 1000000 [1e6], isVerified: false, totalEarnings: 0, contentCount: 0, subscriberCount: 0, registrationTime: 1, profileData: "Test Profile 1", isSuspended: false })
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[PASS] test_UpdateProfileData_Success() (gas: 253900)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateSubscriptionPrice_InvalidPrice() (gas: 199114)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateSubscriptionPrice_NotRegistered() (gas: 21516)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateSubscriptionPrice_Success() (gas: 209365)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_WithdrawCreatorEarnings_NoEarnings() (gas: 197817)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawCreatorEarnings_Success() (gas: 311362)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [311362] CreatorRegistryTest::test_WithdrawCreatorEarnings_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(1000000 [1e6], "Test Profile 1")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Test Profile 1")
    │   └─ ← [Stop]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27522] CreatorRegistry::grantPlatformRole(CreatorRegistryTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CreatorRegistryTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [69631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 1000000 [1e6], 0, 0)
    │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 1000000 [1e6], source: "platform_activity")
    │   └─ ← [Stop]
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [2940] MockERC20::balanceOf(CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [3225] MockERC20::mint(CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4], 1000000 [1e6])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

Suite result: FAILED. 25 passed; 2 failed; 0 skipped; finished in 4.60ms (2.63ms CPU time)

Ran 38 tests for test/unit/SubscriptionManager.t.sol:SubscriptionManagerTest
[PASS] test_CancelSubscription_AlreadyExpired() (gas: 617768)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: log != expected log] test_CancelSubscription_Immediate() (gas: 651646)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [651646] SubscriptionManagerTest::test_CancelSubscription_Immediate()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit SubscriptionCancelled(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, endTime: 1, immediate: true)
    ├─ [13611] SubscriptionManager::cancelSubscription(0x0000000000000000000000000000000000001001, true)
    │   ├─ emit SubscriptionCancelled(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, endTime: 2592001 [2.592e6], immediate: true)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_CancelSubscription_NaturalExpiry() (gas: 650700)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_CancelSubscription_NotSubscribed() (gas: 21747)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_CleanupExpiredSubscriptionsEnhanced_Success() (gas: 813620)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_CleanupExpiredSubscriptions_RateLimiting() (gas: 548458)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_CleanupExpiredSubscriptions_Success() (gas: 828309)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ConfigureAutoRenewal_CreatorNotRegistered() (gas: 26505)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ConfigureAutoRenewal_Disable() (gas: 189099)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ConfigureAutoRenewal_InvalidMaxPrice() (gas: 32514)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ConfigureAutoRenewal_Success() (gas: 208976)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ExecuteAutoRenewal_InsufficientBalance() (gas: 792477)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ExecuteAutoRenewal_NotEnabled() (gas: 624903)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ExecuteAutoRenewal_PriceExceeded() (gas: 806417)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: Error != expected error: InsufficientBalance() != RenewalTooSoon()] test_ExecuteAutoRenewal_RateLimiting() (gas: 895025)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [895025] SubscriptionManagerTest::test_ExecuteAutoRenewal_RateLimiting()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108192] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 999999 [9.999e5])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 999999 [9.999e5]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 999999 [9.999e5])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: f4d678b800000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [59891] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Insufficient balance", attemptTime: 2505602 [2.505e6])
    │   └─ ← [Revert] InsufficientBalance()
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: fb8c2e9c00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [59891] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Insufficient balance", attemptTime: 2505602 [2.505e6])
    │   └─ ← [Revert] InsufficientBalance()
    └─ ← [Revert] Error != expected error: InsufficientBalance() != RenewalTooSoon()

[FAIL: log != expected log] test_ExecuteAutoRenewal_Success() (gas: 868021)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [868021] SubscriptionManagerTest::test_ExecuteAutoRenewal_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108192] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 2000000 [2e6], 2000000 [2e6])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 2000000 [2e6], depositAmount: 2000000 [2e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit AutoRenewalExecuted(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5097602 [5.097e6])
    ├─ [90874] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ emit AutoRenewalExecuted(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184001 [5.184e6])
    │   ├─ emit SubscriptionRenewed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184001 [5.184e6], renewalCount: 1)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_GetPlatformSubscriptionMetrics_Success() (gas: 1076949)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetSubscriptionStatus_Success() (gas: 627571)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_HandleExternalRefund_NoSubscription() (gas: 53018)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: log != expected log] test_HandleExternalRefund_Success() (gas: 711813)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [711813] SubscriptionManagerTest::test_HandleExternalRefund_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] SubscriptionManager::grantSubscriptionProcessorRole(SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit ExternalRefundProcessed(intentId: 0x66e9107f2683cb949d9f50bfe72e06bd, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, refundAmount: 1000000 [1e6])
    ├─ [43294] SubscriptionManager::handleExternalRefund(0x66e9107f2683cb949d9f50bfe72e06bd, 0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [3042] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 0, -1)
    │   │   └─ ← [Stop]
    │   ├─ emit ExternalRefundProcessed(intentId: 0x66e9107f2683cb949d9f50bfe72e06bd, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, refundAmount: 1000000 [1e6])
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_MultipleSubscriptions_Success() (gas: 1026446)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PauseUnpause_Success() (gas: 632098)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RecordSubscriptionPayment_CreatorNotRegistered() (gas: 57808)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RecordSubscriptionPayment_Renewal() (gas: 723872)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RecordSubscriptionPayment_Success() (gas: 587710)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SubscribeToCreator_AlreadySubscribed() (gas: 643584)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SubscribeToCreator_CreatorNotRegistered() (gas: 57060)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SubscribeToCreator_InsufficientAllowance() (gas: 75125)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_SubscribeToCreator_InsufficientBalance() (gas: 11077)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [11077] SubscriptionManagerTest::test_SubscribeToCreator_InsufficientBalance()
    ├─ [3202] MockERC20::forceBalance(0x0000000000000000000000000000000000002001, 999999 [9.999e5])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

[PASS] test_SubscribeToCreator_Renewal() (gas: 711657)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SubscribeToCreator_Success() (gas: 646965)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SubscriptionExpiration_Timing() (gas: 621029)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SubscriptionIsolation_Success() (gas: 931373)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_WithdrawAutoRenewalBalance_Full() (gas: 189315)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_WithdrawAutoRenewalBalance_InsufficientBalance() (gas: 200017)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_WithdrawAutoRenewalBalance_Success() (gas: 216622)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_WithdrawSubscriptionEarnings_NoEarnings() (gas: 18810)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawSubscriptionEarnings_Success() (gas: 635866)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [635866] SubscriptionManagerTest::test_WithdrawSubscriptionEarnings_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1225] MockERC20::mint(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 975000 [9.75e5])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

Suite result: FAILED. 32 passed; 6 failed; 0 skipped; finished in 11.52ms (6.28ms CPU time)

Ran 28 tests for test/unit/PriceOracle.t.sol:PriceOracleTest
[PASS] test_ApplySlippage_DifferentPercentages() (gas: 20638)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ApplySlippage_ExcessiveSlippage() (gas: 9378)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ApplySlippage_Success() (gas: 10294)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetETHPrice_DifferentAmounts() (gas: 74504)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: next call did not revert as expected] test_GetETHPrice_QuoterFails() (gas: 72381)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [72381] PriceOracleTest::test_GetETHPrice_QuoterFails()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: Quote failed)
    │   └─ ← [Return]
    ├─ [35317] PriceOracle::getETHPrice(100000000 [1e8])
    │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 50000000000000000 [5e16]
    └─ ← [Revert] next call did not revert as expected

[PASS] test_GetETHPrice_Success() (gas: 46556)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: assertion failed: 0 != 1000000] test_GetMultipleQuotes_MissingPools() (gas: 126271)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [126271] PriceOracleTest::test_GetMultipleQuotes_MissingPools()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [3582] MockQuoterV2::setMockPrice(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [81987] PriceOracle::getMultipleQuotes(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18])
    │   ├─ [24517] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: Quote failed
    │   ├─ [24517] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: Quote failed
    │   ├─ [24517] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: Quote failed
    │   └─ ← [Return] [0, 0, 0]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 1000000 [1e6]) [staticcall]
    │   └─ ← [Revert] assertion failed: 0 != 1000000
    └─ ← [Revert] assertion failed: 0 != 1000000

[FAIL: assertion failed: 1 != 1995000000] test_GetMultipleQuotes_Success() (gas: 84750)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [84750] PriceOracleTest::test_GetMultipleQuotes_Success()
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500, 1995000000 [1.995e9])
    │   └─ ← [Stop]
    ├─ [3582] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 10000 [1e4], 1990000000 [1.99e9])
    │   └─ ← [Stop]
    ├─ [49921] PriceOracle::getMultipleQuotes(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18])
    │   ├─ [28942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   ├─ [5042] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   ├─ [5042] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] [1, 1, 1]
    ├─ [0] VM::assertEq(1, 1995000000 [1.995e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 1995000000
    └─ ← [Revert] assertion failed: 1 != 1995000000

[PASS] test_GetTokenAmountForUSDC_AutoPoolFee() (gas: 179519)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetTokenAmountForUSDC_Success() (gas: 180622)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetTokenAmountForUSDC_USDCInput() (gas: 180654)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetTokenAmountForUSDC_ViaWETHRoute() (gas: 228388)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: assertion failed: 1 != 1000000000] test_GetTokenPrice_AutoPoolFee() (gas: 50397)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [50397] PriceOracleTest::test_GetTokenPrice_AutoPoolFee()
    ├─ [41306] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500000000000000000 [5e17], 0)
    │   ├─ [30942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 500000000000000000 [5e17], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1000000000 [1e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 1000000000
    └─ ← [Revert] assertion failed: 1 != 1000000000

[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed] test_GetTokenPrice_QuoterFails() (gas: 68834)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [68834] PriceOracleTest::test_GetTokenPrice_QuoterFails()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: Quote failed)
    │   └─ ← [Return]
    ├─ [31216] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 3000)
    │   ├─ [24517] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: Quote failed
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed

[FAIL: assertion failed: 1 != 2000000000] test_GetTokenPrice_Success() (gas: 50246)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [50246] PriceOracleTest::test_GetTokenPrice_Success()
    ├─ [41125] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 3000)
    │   ├─ [30942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 2000000000 [2e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 2000000000
    └─ ← [Revert] assertion failed: 1 != 2000000000

[FAIL: assertion failed: 1 != 2000000000] test_OptimalPoolFeeDetection() (gas: 50605)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [50605] PriceOracleTest::test_OptimalPoolFeeDetection()
    ├─ [41306] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 0)
    │   ├─ [30942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 2000000000 [2e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 2000000000
    └─ ← [Revert] assertion failed: 1 != 2000000000

[PASS] test_PriceCalculation_LargeAmounts() (gas: 46491)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: assertion failed: 500000000 != 500] test_PriceCalculation_SmallAmounts() (gas: 46482)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [46482] PriceOracleTest::test_PriceCalculation_SmallAmounts()
    ├─ [37817] PriceOracle::getETHPrice(1)
    │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 500000000 [5e8]
    ├─ [0] VM::assertEq(500000000 [5e8], 500) [staticcall]
    │   └─ ← [Revert] assertion failed: 500000000 != 500
    └─ ← [Revert] assertion failed: 500000000 != 500

[PASS] test_PriceCalculation_ZeroAmount() (gas: 166516)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_PriceConsistency() (gas: 57034)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SetCustomPoolFee_InvalidFee() (gas: 14955)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_SetCustomPoolFee_OnlyOwner() (gas: 14924)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: assertion failed: 1 != 2010000000] test_SetCustomPoolFee_Success() (gas: 112459)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [112459] PriceOracleTest::test_SetCustomPoolFee_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit CustomPoolFeeSet(tokenA: 0x4200000000000000000000000000000000000006, tokenB: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, fee: 500)
    ├─ [49846] PriceOracle::setCustomPoolFee(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500)
    │   ├─ emit CustomPoolFeeSet(tokenA: 0x4200000000000000000000000000000000000006, tokenB: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, fee: 500)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500, 2010000000 [2.01e9])
    │   └─ ← [Stop]
    ├─ [34578] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 0)
    │   ├─ [28942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 2010000000 [2.01e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 2010000000
    └─ ← [Revert] assertion failed: 1 != 2010000000

[PASS] test_TokenDecimalHandling() (gas: 168915)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: No liquidity] test_UnsupportedTokenPairs() (gas: 267558)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [267558] PriceOracleTest::test_UnsupportedTokenPairs()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: No liquidity)
    │   └─ ← [Return]
    ├─ [258725] PriceOracle::getTokenAmountForUSDC(0x0000000000000000000000000000000000009999, 100000000 [1e8], 0)
    │   ├─ [118714] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000009999, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x0000000000000000000000000000000000009999 TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   ├─ [33317] PriceOracle::getETHPrice(100000000 [1e8])
    │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 50000000000000000 [5e16]
    │   ├─ [97970] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000009999, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x0000000000000000000000000000000000009999 TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] Error != expected error: QuoteReverted() != MockQuoterV2: No liquidity

[PASS] test_UpdateDefaultSlippage_OnlyOwner() (gas: 17983)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateDefaultSlippage_Success() (gas: 24345)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateDefaultSlippage_TooHigh() (gas: 17947)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Suite result: FAILED. 18 passed; 10 failed; 0 skipped; finished in 16.00ms (7.09ms CPU time)

Ran 11 tests for test/integration/CommerceProtocolFlow.t.sol:CommerceProtocolFlowTest
[PASS] testContentId() (gas: 2560)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] testToken() (gas: 2795)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[FAIL: QuoteReverted()] test_CompletePaymentFlow_Success() (gas: 388843)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [388843] CommerceProtocolFlowTest::test_CompletePaymentFlow_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [340692] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(2000000 [2e6])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 1000000000000000 [1e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_ConcurrentPaymentIntents_Success() (gas: 423756)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [423756] CommerceProtocolFlowTest::test_ConcurrentPaymentIntents_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 20000000 [2e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 20000000 [2e7])
    │   └─ ← [Return] true
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [340692] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(2000000 [2e6])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 1000000000000000 [1e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_CreateContentPaymentIntent_AlternativeToken() (gas: 388782)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [388782] CommerceProtocolFlowTest::test_CreateContentPaymentIntent_AlternativeToken()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [340692] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(2000000 [2e6])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 1000000000000000 [1e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: Error != expected error: QuoteReverted() != Insufficient token balance] test_CreatePaymentIntent_InsufficientBalance() (gas: 420812)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [420812] CommerceProtocolFlowTest::test_CreatePaymentIntent_InsufficientBalance()
    ├─ [32543] MockERC20::mint(0x0000000000000000000000000000000000008888, 500000000000000000 [5e17])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000008888, value: 500000000000000000 [5e17])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000008888)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000008888, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000008888)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient token balance)
    │   └─ ← [Return]
    ├─ [340692] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(2000000 [2e6])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 1000000000000000 [1e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] Error != expected error: QuoteReverted() != Insufficient token balance

[FAIL: QuoteReverted()] test_CreateSubscriptionPaymentIntent_NonStandardDecimals() (gas: 335358)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [335358] CommerceProtocolFlowTest::test_CreateSubscriptionPaymentIntent_NonStandardDecimals()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 20000000 [2e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 20000000 [2e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [289370] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 1, creator: 0x0000000000000000000000000000000000001002, contentId: 0, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ [258965] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 10000000 [1e7], 0)
    │   │   ├─ [118834] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x2e234dae75c793f67a35089c9d99245e1c58470b TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(10000000 [1e7])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 5000000000000000 [5e15]
    │   │   ├─ [98090] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x2e234dae75c793f67a35089c9d99245e1c58470b TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_ExecutePayment_InvalidSignature() (gas: 388756)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [388756] CommerceProtocolFlowTest::test_ExecutePayment_InvalidSignature()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [340692] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(2000000 [2e6])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 1000000000000000 [1e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_OperatorMetrics_Tracking() (gas: 399174)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [399174] CommerceProtocolFlowTest::test_OperatorMetrics_Tracking()
    ├─ [9205] CommerceProtocolIntegration::getOperatorMetrics() [staticcall]
    │   └─ ← [Return] 0, 0, 0, 0
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [340692] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(2000000 [2e6])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 1000000000000000 [1e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_PaymentProcessing_Failure() (gas: 388800)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [388800] CommerceProtocolFlowTest::test_PaymentProcessing_Failure()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [340692] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(2000000 [2e6])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 1000000000000000 [1e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_SubscriptionFlow_AlternativeToken() (gas: 335497)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [335497] CommerceProtocolFlowTest::test_SubscriptionFlow_AlternativeToken()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 5000000000000000000 [5e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 5000000000000000000 [5e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [289490] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 1, creator: 0x0000000000000000000000000000000000001002, contentId: 0, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ [259085] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 10000000 [1e7], 0)
    │   │   ├─ [118894] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x22a7c94543caa0e72439289e039b35a64c79a966 Fee: 500
    │   │   ├─ [33317] PriceOracle::getETHPrice(10000000 [1e7])
    │   │   │   ├─ [30175] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   │   └─ ← [Return] 2000000000 [2e9], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   │   └─ ← [Return] 5000000000000000 [5e15]
    │   │   ├─ [98150] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x4200000000000000000000000000000000000006, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity for pair. TokenIn: 0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f TokenOut: 0x4200000000000000000000000000000000000006 Fee: 3000
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

Suite result: FAILED. 2 passed; 9 failed; 0 skipped; finished in 18.29ms (13.33ms CPU time)

Ran 31 tests for test/unit/ContentRegistry.t.sol:ContentRegistryTest
[FAIL: Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b] test_BanPhrase_Success() (gas: 206765)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [206765] ContentRegistryTest::test_BanPhrase_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(false, false, false, true)
    │   └─ ← [Return]
    ├─ emit WordBanned(word: "get rich quick", isPhrase: true)
    ├─ [79564] ContentRegistry::banPhrase("get rich quick")
    │   ├─ emit WordBanned(word: "get rich quick", isPhrase: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 816a9c2b00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [104780] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This will help you get rich quick with crypto", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   └─ ← [Revert] BannedWordDetected("get rich quick")
    └─ ← [Revert] Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b

[FAIL: next call did not revert as expected] test_BanWord_Success() (gas: 877811)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [877811] ContentRegistryTest::test_BanWord_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(false, false, false, true)
    │   └─ ← [Return]
    ├─ emit WordBanned(word: "spam", isPhrase: false)
    ├─ [30524] ContentRegistry::banWord("spam", false)
    │   ├─ emit WordBanned(word: "spam", isPhrase: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 816a9c2b00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [824697] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "This is spam content", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [26347] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "This is spam content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    └─ ← [Revert] next call did not revert as expected

[PASS] test_GetActiveContentPaginated_Success() (gas: 1478287)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetContentByCategory_Success() (gas: 1504048)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetContentByTag_Success() (gas: 1330345)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetContent_InvalidId() (gas: 26301)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetCreatorActiveContent_Success() (gas: 701367)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_GetCreatorContent_Success() (gas: 1024537)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: assertion failed: 5 != 8] test_GetPlatformStats_Success() (gas: 1527831)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [1527831] ContentRegistryTest::test_GetPlatformStats_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [815265] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Article", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [26347] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Article", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [655041] ContentRegistry::registerContent("QmTestHash987654321098765432109876543210987654321", "Video", "This is a sample article description for testing purposes.", 1, 200000 [2e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2447] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash987654321098765432109876543210987654321", title: "Video", category: 1, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [8271] ContentRegistry::updateContent(2, 0, false)
    │   ├─ emit ContentUpdated(contentId: 2, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [21327] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Return] 2, 1, [1, 1, 0, 0, 0], [1, 0, 0, 0, 0]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(5, 8) [staticcall]
    │   └─ ← [Revert] assertion failed: 5 != 8
    └─ ← [Revert] assertion failed: 5 != 8

[PASS] test_PauseUnpause_Success() (gas: 729234)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RecordPurchase_InactiveContent() (gas: 425387)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RecordPurchase_OnlyAuthorized() (gas: 463673)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RecordPurchase_Success() (gas: 561833)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterContent_BoundaryValues() (gas: 1459776)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterContent_CreatorNotRegistered() (gas: 74605)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterContent_DifferentCategories() (gas: 3654639)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterContent_EmptyTitle() (gas: 36224)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[FAIL: next call did not revert as expected] test_RegisterContent_InvalidIPFSHash() (gas: 796033)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Traces:
  [796033] ContentRegistryTest::test_RegisterContent_InvalidIPFSHash()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: dcdb6d0200000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [780567] ContentRegistry::registerContent("invalid", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [26347] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "invalid", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    └─ ← [Revert] next call did not revert as expected

[PASS] test_RegisterContent_PriceTooHigh() (gas: 36690)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterContent_PriceTooLow() (gas: 36637)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterContent_Success() (gas: 926794)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_RegisterContent_TooManyTags() (gas: 49338)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ReportContent_AlreadyReported() (gas: 684744)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ReportContent_AutoModeration() (gas: 1141983)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ReportContent_Success() (gas: 695703)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ResolveReport_RemoveContent() (gas: 633391)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_ResolveReport_Success() (gas: 730825)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateContent_Deactivation() (gas: 450521)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateContent_InvalidPrice() (gas: 463302)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateContent_OnlyCreator() (gas: 465061)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

[PASS] test_UpdateContent_PriceUpdate() (gas: 465965)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Configuring mock price data...
  Mock price data configured

Suite result: FAILED. 27 passed; 4 failed; 0 skipped; finished in 18.87ms (19.93ms CPU time)

Ran 10 test suites in 267.30ms (130.31ms CPU time): 144 tests passed, 62 failed, 0 skipped (206 total tests)

Failing tests:
Encountered 2 failing tests in test/integration/BusinessScenarios.t.sol:BusinessScenariosTest
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_CreatorEarningsFlow() (gas: 13405)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_CreatorOnboardingFlow() (gas: 8936)

Encountered 9 failing tests in test/integration/CommerceProtocolFlow.t.sol:CommerceProtocolFlowTest
[FAIL: QuoteReverted()] test_CompletePaymentFlow_Success() (gas: 388843)
[FAIL: QuoteReverted()] test_ConcurrentPaymentIntents_Success() (gas: 423756)
[FAIL: QuoteReverted()] test_CreateContentPaymentIntent_AlternativeToken() (gas: 388782)
[FAIL: Error != expected error: QuoteReverted() != Insufficient token balance] test_CreatePaymentIntent_InsufficientBalance() (gas: 420812)
[FAIL: QuoteReverted()] test_CreateSubscriptionPaymentIntent_NonStandardDecimals() (gas: 335358)
[FAIL: QuoteReverted()] test_ExecutePayment_InvalidSignature() (gas: 388756)
[FAIL: QuoteReverted()] test_OperatorMetrics_Tracking() (gas: 399174)
[FAIL: QuoteReverted()] test_PaymentProcessing_Failure() (gas: 388800)
[FAIL: QuoteReverted()] test_SubscriptionFlow_AlternativeToken() (gas: 335497)

Encountered 6 failing tests in test/integration/CrossContractInteraction.t.sol:CrossContractInteractionTest
[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] test_AdminRoleChanges_GlobalEffects() (gas: 17609)
[FAIL: next call did not revert as expected] test_CreatorDeactivation_CascadeEffects() (gas: 1600232)
[FAIL: Invalid signer] test_PaymentFailure_StateConsistency() (gas: 489664)
[FAIL: assertion failed: 3 != 0] test_PlatformWideOperations_Consistency() (gas: 3505699)
[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] test_RoleChanges_CrossContractPermissions() (gas: 160146)
[FAIL: AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c)] test_SubscriptionRenewal_MultiContractUpdate() (gas: 757760)

Encountered 2 failing tests in test/integration/EndToEndFlow.t.sol:EndToEndFlowTest
[FAIL: InvalidAutoRenewalConfig()] test_AutoRenewalIntegration_Success() (gas: 667639)
[FAIL: QuoteReverted()] test_CommerceProtocolIntegration_CustomToken() (gas: 1552474)

Encountered 11 failing tests in test/unit/CommerceProtocolIntegration.t.sol:CommerceProtocolIntegrationTest
[FAIL: User context corrupted by MEV: 0x0000000000000000000000000000000000002001 != 0x00000000000000000000000000000000dEADFAcE] test_FrontRunningDefense_MEVResistance() (gas: 994077)
[FAIL: Creator earnings don't match calculations: 2910375 != 94500000] test_PaymentCalculations_MathematicalPrecision() (gas: 1288239)
[FAIL: VOL tokens not deducted correctly: 0 != 20000000000000000000] test_PaymentExecution_MultiTokenComplexity() (gas: 1338982)
[FAIL: Incorrect amount deducted from user: 0 != 3000000] test_PaymentExecution_NormalConditions() (gas: 1358011)
[FAIL: Refund not properly recorded: 0x0000000000000000000000000000000000000000000000000000000000000000 != 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000] test_PaymentFailureRecovery_GracefulDegradation() (gas: 963957)
[FAIL: Error != expected error: InvalidContentId() != InvalidContent()] test_PaymentIntentCreation_ComprehensiveValidation() (gas: 556038)
[FAIL: next call did not revert as expected] test_ReentrancyDefense_MultiVectorAttacks() (gas: 866104)
[FAIL: next call did not revert as expected] test_RoleManagement_Success() (gas: 49729)
[FAIL: next call did not revert as expected] test_SignatureReplayDefense_ComprehensiveProtection() (gas: 1814680)
[FAIL: Error != expected error: AccessControlUnauthorizedAccount(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122, 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70) != UnauthorizedSigner()] test_SignatureSystem_CryptographicSecurity() (gas: 620010)
[FAIL: InvalidContent()] test_SystemLoad_StressConditions() (gas: 817072)

Encountered 4 failing tests in test/unit/ContentRegistry.t.sol:ContentRegistryTest
[FAIL: Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b] test_BanPhrase_Success() (gas: 206765)
[FAIL: next call did not revert as expected] test_BanWord_Success() (gas: 877811)
[FAIL: assertion failed: 5 != 8] test_GetPlatformStats_Success() (gas: 1527831)
[FAIL: next call did not revert as expected] test_RegisterContent_InvalidIPFSHash() (gas: 796033)

Encountered 2 failing tests in test/unit/CreatorRegistry.t.sol:CreatorRegistryTest
[FAIL: assertion failed] test_UpdateProfileData_EmptyData() (gas: 208536)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawCreatorEarnings_Success() (gas: 311362)

Encountered 10 failing tests in test/unit/PayPerView.t.sol:PayPerViewTest
[FAIL: next call did not revert as expected] test_CompletePurchase_InsufficientPayment() (gas: 995088)
[FAIL: log != expected log] test_CompletePurchase_Success() (gas: 1003678)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_CreatePurchaseIntent_NonExistentContent() (gas: 25839)
[FAIL: QuoteReverted()] test_CreatePurchaseIntent_OtherToken() (gas: 381067)
[FAIL: assertion failed: 101000 != 100000] test_CreatePurchaseIntent_USDC() (gas: 415599)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_GetPaymentOptions_NonExistentContent() (gas: 14822)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_PurchaseContentDirect_InsufficientBalance() (gas: 11118)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_PurchaseContentDirect_NonExistentContent() (gas: 56451)
[FAIL: Error != expected error: Invalid intent ID format != Content not active] test_RecordExternalPurchase_InactiveContent() (gas: 94531)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawEarnings_Success() (gas: 697701)

Encountered 10 failing tests in test/unit/PriceOracle.t.sol:PriceOracleTest
[FAIL: next call did not revert as expected] test_GetETHPrice_QuoterFails() (gas: 72381)
[FAIL: assertion failed: 0 != 1000000] test_GetMultipleQuotes_MissingPools() (gas: 126271)
[FAIL: assertion failed: 1 != 1995000000] test_GetMultipleQuotes_Success() (gas: 84750)
[FAIL: assertion failed: 1 != 1000000000] test_GetTokenPrice_AutoPoolFee() (gas: 50397)
[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed] test_GetTokenPrice_QuoterFails() (gas: 68834)
[FAIL: assertion failed: 1 != 2000000000] test_GetTokenPrice_Success() (gas: 50246)
[FAIL: assertion failed: 1 != 2000000000] test_OptimalPoolFeeDetection() (gas: 50605)
[FAIL: assertion failed: 500000000 != 500] test_PriceCalculation_SmallAmounts() (gas: 46482)
[FAIL: assertion failed: 1 != 2010000000] test_SetCustomPoolFee_Success() (gas: 112459)
[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: No liquidity] test_UnsupportedTokenPairs() (gas: 267558)

Encountered 6 failing tests in test/unit/SubscriptionManager.t.sol:SubscriptionManagerTest
[FAIL: log != expected log] test_CancelSubscription_Immediate() (gas: 651646)
[FAIL: Error != expected error: InsufficientBalance() != RenewalTooSoon()] test_ExecuteAutoRenewal_RateLimiting() (gas: 895025)
[FAIL: log != expected log] test_ExecuteAutoRenewal_Success() (gas: 868021)
[FAIL: log != expected log] test_HandleExternalRefund_Success() (gas: 711813)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_SubscribeToCreator_InsufficientBalance() (gas: 11077)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawSubscriptionEarnings_Success() (gas: 635866)

Encountered a total of 62 failing tests, 144 tests succeeded
