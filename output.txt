No files changed, compilation skipped

Ran 1 test for test/integration/BusinessScenarios.t.sol:BusinessScenariosTest
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] setUp() (gas: 0)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 4.11ms (0.00ns CPU time)

Ran 1 test for test/integration/CrossContractInteraction.t.sol:CrossContractInteractionTest
[FAIL: assertion failed] setUp() (gas: 0)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 5.68ms (0.00ns CPU time)

Ran 1 test for test/unit/ContentRegistry.t.sol:ContentRegistryTest
[FAIL: assertion failed] setUp() (gas: 0)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 5.81ms (0.00ns CPU time)

Ran 1 test for test/integration/CommerceProtocolFlow.t.sol:CommerceProtocolFlowTest
[FAIL: assertion failed] setUp() (gas: 0)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 6.05ms (0.00ns CPU time)

Ran 1 test for test/integration/EndToEndFlow.t.sol:EndToEndFlowTest
[FAIL: assertion failed] setUp() (gas: 0)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 6.60ms (0.00ns CPU time)

Ran 1 test for test/unit/SubscriptionManager.t.sol:SubscriptionManagerTest
[FAIL: assertion failed] setUp() (gas: 0)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 4.40ms (0.00ns CPU time)

Ran 1 test for test/unit/PayPerView.t.sol:PayPerViewTest
[FAIL: assertion failed] setUp() (gas: 0)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 8.64ms (0.00ns CPU time)

Ran 28 tests for test/unit/PriceOracle.t.sol:PriceOracleTest
[PASS] test_ApplySlippage_DifferentPercentages() (gas: 20638)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_ApplySlippage_ExcessiveSlippage() (gas: 9356)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_ApplySlippage_Success() (gas: 10294)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[FAIL: QuoteReverted()] test_GetETHPrice_DifferentAmounts() (gas: 41761)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [41761] PriceOracleTest::test_GetETHPrice_DifferentAmounts()
    ├─ [35563] PriceOracle::getETHPrice(1000000 [1e6])
    │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed] test_GetETHPrice_QuoterFails() (gas: 70130)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [70130] PriceOracleTest::test_GetETHPrice_QuoterFails()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: Quote failed)
    │   └─ ← [Return]
    ├─ [33063] PriceOracle::getETHPrice(100000000 [1e8])
    │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed

[FAIL: QuoteReverted()] test_GetETHPrice_Success() (gas: 40870)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [40870] PriceOracleTest::test_GetETHPrice_Success()
    ├─ [35563] PriceOracle::getETHPrice(100000000 [1e8])
    │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: assertion failed: 0 != 1000000] test_GetMultipleQuotes_MissingPools() (gas: 126271)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [126271] PriceOracleTest::test_GetMultipleQuotes_MissingPools()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [3582] MockQuoterV2::setMockPrice(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [81987] PriceOracle::getMultipleQuotes(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18])
    │   ├─ [24517] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: Quote failed
    │   ├─ [24517] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: Quote failed
    │   ├─ [24517] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: Quote failed
    │   └─ ← [Return] [0, 0, 0]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 1000000 [1e6]) [staticcall]
    │   └─ ← [Revert] assertion failed: 0 != 1000000
    └─ ← [Revert] assertion failed: 0 != 1000000

[FAIL: assertion failed: 1 != 1995000000] test_GetMultipleQuotes_Success() (gas: 84728)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [84728] PriceOracleTest::test_GetMultipleQuotes_Success()
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500, 1995000000 [1.995e9])
    │   └─ ← [Stop]
    ├─ [3582] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 10000 [1e4], 1990000000 [1.99e9])
    │   └─ ← [Stop]
    ├─ [49921] PriceOracle::getMultipleQuotes(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18])
    │   ├─ [28942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   ├─ [5042] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   ├─ [5042] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] [1, 1, 1]
    ├─ [0] VM::assertEq(1, 1995000000 [1.995e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 1995000000
    └─ ← [Revert] assertion failed: 1 != 1995000000

[FAIL: QuoteReverted()] test_GetTokenAmountForUSDC_AutoPoolFee() (gas: 73087)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [73087] PriceOracleTest::test_GetTokenAmountForUSDC_AutoPoolFee()
    ├─ [67540] PriceOracle::getTokenAmountForUSDC(0x1234567890123456789012345678901234567890, 25000000 [2.5e7], 0)
    │   ├─ [29300] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   ├─ [31063] PriceOracle::getETHPrice(25000000 [2.5e7])
    │   │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_GetTokenAmountForUSDC_Success() (gas: 72946)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [72946] PriceOracleTest::test_GetTokenAmountForUSDC_Success()
    ├─ [67414] PriceOracle::getTokenAmountForUSDC(0x1234567890123456789012345678901234567890, 50000000 [5e7], 3000)
    │   ├─ [29300] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   ├─ [31063] PriceOracle::getETHPrice(50000000 [5e7])
    │   │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_GetTokenAmountForUSDC_USDCInput() (gas: 73253)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [73253] PriceOracleTest::test_GetTokenAmountForUSDC_USDCInput()
    ├─ [67585] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000000 [1e8], 0)
    │   ├─ [29345] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   ├─ [31063] PriceOracle::getETHPrice(100000000 [1e8])
    │   │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_GetTokenAmountForUSDC_ViaWETHRoute() (gas: 124024)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [124024] PriceOracleTest::test_GetTokenAmountForUSDC_ViaWETHRoute()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x0000000000000000000000000000000000005555, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [23482] MockQuoterV2::setMockPrice(0x0000000000000000000000000000000000005555, 0x4200000000000000000000000000000000000006, 3000, 1000000000000000 [1e15])
    │   └─ ← [Stop]
    ├─ [65040] PriceOracle::getTokenAmountForUSDC(0x0000000000000000000000000000000000005555, 2000000 [2e6], 0)
    │   ├─ [29300] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000005555, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   ├─ [31063] PriceOracle::getETHPrice(2000000 [2e6])
    │   │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: assertion failed: 1 != 1000000000] test_GetTokenPrice_AutoPoolFee() (gas: 50442)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [50442] PriceOracleTest::test_GetTokenPrice_AutoPoolFee()
    ├─ [41306] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500000000000000000 [5e17], 0)
    │   ├─ [30942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 500000000000000000 [5e17], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 1000000000 [1e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 1000000000
    └─ ← [Revert] assertion failed: 1 != 1000000000

[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed] test_GetTokenPrice_QuoterFails() (gas: 68834)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [68834] PriceOracleTest::test_GetTokenPrice_QuoterFails()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: Quote failed)
    │   └─ ← [Return]
    ├─ [31216] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 3000)
    │   ├─ [24517] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: Quote failed
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed

[FAIL: assertion failed: 1 != 2000000000] test_GetTokenPrice_Success() (gas: 50224)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [50224] PriceOracleTest::test_GetTokenPrice_Success()
    ├─ [41125] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 3000)
    │   ├─ [30942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 2000000000 [2e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 2000000000
    └─ ← [Revert] assertion failed: 1 != 2000000000

[FAIL: assertion failed: 1 != 2000000000] test_OptimalPoolFeeDetection() (gas: 50605)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [50605] PriceOracleTest::test_OptimalPoolFeeDetection()
    ├─ [41306] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 0)
    │   ├─ [30942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 2000000000 [2e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 2000000000
    └─ ← [Revert] assertion failed: 1 != 2000000000

[FAIL: QuoteReverted()] test_PriceCalculation_LargeAmounts() (gas: 40871)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [40871] PriceOracleTest::test_PriceCalculation_LargeAmounts()
    ├─ [35563] PriceOracle::getETHPrice(1000000000000 [1e12])
    │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_PriceCalculation_SmallAmounts() (gas: 40826)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [40826] PriceOracleTest::test_PriceCalculation_SmallAmounts()
    ├─ [35563] PriceOracle::getETHPrice(1)
    │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_PriceCalculation_ZeroAmount() (gas: 40863)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [40863] PriceOracleTest::test_PriceCalculation_ZeroAmount()
    ├─ [35563] PriceOracle::getETHPrice(0)
    │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: QuoteReverted()] test_PriceConsistency() (gas: 40870)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [40870] PriceOracleTest::test_PriceConsistency()
    ├─ [35563] PriceOracle::getETHPrice(1000000000 [1e9])
    │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[PASS] test_SetCustomPoolFee_InvalidFee() (gas: 14955)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_SetCustomPoolFee_OnlyOwner() (gas: 14924)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[FAIL: assertion failed: 1 != 2010000000] test_SetCustomPoolFee_Success() (gas: 112459)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [112459] PriceOracleTest::test_SetCustomPoolFee_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit CustomPoolFeeSet(tokenA: 0x4200000000000000000000000000000000000006, tokenB: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, fee: 500)
    ├─ [49846] PriceOracle::setCustomPoolFee(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500)
    │   ├─ emit CustomPoolFeeSet(tokenA: 0x4200000000000000000000000000000000000006, tokenB: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, fee: 500)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500, 2010000000 [2.01e9])
    │   └─ ← [Stop]
    ├─ [34578] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 0)
    │   ├─ [28942] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Return] 1, 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   └─ ← [Return] 1
    ├─ [0] VM::assertEq(1, 2010000000 [2.01e9]) [staticcall]
    │   └─ ← [Revert] assertion failed: 1 != 2010000000
    └─ ← [Revert] assertion failed: 1 != 2010000000

[FAIL: QuoteReverted()] test_TokenDecimalHandling() (gas: 42628)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [42628] PriceOracleTest::test_TokenDecimalHandling()
    ├─ [36981] PriceOracle::getTokenAmountForUSDC(0x4200000000000000000000000000000000000006, 2000000000 [2e9], 0)
    │   ├─ [35563] PriceOracle::getETHPrice(2000000000 [2e9])
    │   │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] QuoteReverted()

[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: No liquidity] test_UnsupportedTokenPairs() (gas: 76373)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [76373] PriceOracleTest::test_UnsupportedTokenPairs()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: No liquidity)
    │   └─ ← [Return]
    ├─ [67540] PriceOracle::getTokenAmountForUSDC(0x0000000000000000000000000000000000009999, 100000000 [1e8], 0)
    │   ├─ [29300] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000009999, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   ├─ [31063] PriceOracle::getETHPrice(100000000 [1e8])
    │   │   ├─ [29323] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Revert] MockQuoterV2: No liquidity
    │   │   └─ ← [Revert] QuoteReverted()
    │   └─ ← [Revert] QuoteReverted()
    └─ ← [Revert] Error != expected error: QuoteReverted() != MockQuoterV2: No liquidity

[PASS] test_UpdateDefaultSlippage_OnlyOwner() (gas: 17983)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_UpdateDefaultSlippage_Success() (gas: 24278)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_UpdateDefaultSlippage_TooHigh() (gas: 17947)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Suite result: FAILED. 8 passed; 20 failed; 0 skipped; finished in 6.53ms (3.85ms CPU time)

Ran 27 tests for test/unit/CreatorRegistry.t.sol:CreatorRegistryTest
[PASS] test_FeeCalculation_Various() (gas: 22719)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[FAIL: assertion failed] test_GetPlatformStats_Success() (gas: 191302)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191302] CreatorRegistryTest::test_GetPlatformStats_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[PASS] test_InvalidCreatorAddress_Handling() (gas: 24945)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[FAIL: assertion failed] test_MultipleCreators_Success() (gas: 191378)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191378] CreatorRegistryTest::test_MultipleCreators_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(1000000 [1e6], "Creator 1 Profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Creator 1 Profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_PauseUnpause_Success() (gas: 191302)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191302] CreatorRegistryTest::test_PauseUnpause_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_RegisterCreator_AlreadyRegistered() (gas: 191303)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191303] CreatorRegistryTest::test_RegisterCreator_AlreadyRegistered()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[PASS] test_RegisterCreator_EmptyProfileData() (gas: 27170)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_RegisterCreator_MaximumPrice() (gas: 237865)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_RegisterCreator_MinimumPrice() (gas: 237844)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_RegisterCreator_PriceTooHigh() (gas: 27522)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_RegisterCreator_PriceTooLow() (gas: 31330)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_RegisterCreator_Success() (gas: 259556)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[FAIL: assertion failed] test_SetCreatorVerification_OnlyModerator() (gas: 191302)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191302] CreatorRegistryTest::test_SetCreatorVerification_OnlyModerator()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_SetCreatorVerification_RemoveVerification() (gas: 191303)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191303] CreatorRegistryTest::test_SetCreatorVerification_RemoveVerification()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_SetCreatorVerification_Success() (gas: 191302)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191302] CreatorRegistryTest::test_SetCreatorVerification_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_UpdateCreatorStats_OnlyPlatformContract() (gas: 191323)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191323] CreatorRegistryTest::test_UpdateCreatorStats_OnlyPlatformContract()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_UpdateCreatorStats_Success() (gas: 191348)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191348] CreatorRegistryTest::test_UpdateCreatorStats_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[PASS] test_UpdatePlatformFee_OnlyOwner() (gas: 18041)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_UpdatePlatformFee_Success() (gas: 27544)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[PASS] test_UpdatePlatformFee_TooHigh() (gas: 18028)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[FAIL: assertion failed] test_UpdateProfileData_EmptyData() (gas: 191345)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191345] CreatorRegistryTest::test_UpdateProfileData_EmptyData()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_UpdateProfileData_Success() (gas: 191323)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191323] CreatorRegistryTest::test_UpdateProfileData_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_UpdateSubscriptionPrice_InvalidPrice() (gas: 191367)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191367] CreatorRegistryTest::test_UpdateSubscriptionPrice_InvalidPrice()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[PASS] test_UpdateSubscriptionPrice_NotRegistered() (gas: 21516)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

[FAIL: assertion failed] test_UpdateSubscriptionPrice_Success() (gas: 191301)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191301] CreatorRegistryTest::test_UpdateSubscriptionPrice_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_WithdrawCreatorEarnings_NoEarnings() (gas: 191322)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191322] CreatorRegistryTest::test_WithdrawCreatorEarnings_NoEarnings()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: assertion failed] test_WithdrawCreatorEarnings_Success() (gas: 191366)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances

Traces:
  [191366] CreatorRegistryTest::test_WithdrawCreatorEarnings_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(10000000 [1e7], "Test Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 10000000 [1e7], timestamp: 1, profileData: "Test Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

Suite result: FAILED. 12 passed; 15 failed; 0 skipped; finished in 8.07ms (3.74ms CPU time)

Ran 14 tests for test/unit/CommerceProtocolIntegration.t.sol:CommerceProtocolIntegrationTest
[PASS] test_ContentRegistration_Success() (gas: 347848)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

[PASS] test_EIP712Compliance_IndustryStandards() (gas: 824095)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

[FAIL: User context corrupted by MEV: 0x0000000000000000000000000000000000002001 != 0x00000000000000000000000000000000dEADFAcE] test_FrontRunningDefense_MEVResistance() (gas: 994013)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [994013] CommerceProtocolIntegrationTest::test_FrontRunningDefense_MEVResistance()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 10000000000000000000 [1e19])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 10000000000000000000 [1e19])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [464132] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 500, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [38426] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 3000000 [3e6], 0)
    │   │   ├─ [30187] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 500) [staticcall]
    │   │   └─ ← [Return] 3150000000000000000 [3.15e18]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], expectedAmount: 3150000000000000000 [3.15e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3150000000000000000 [3.15e18], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [49643] MockERC20::mint(0x00000000000000000000000000000000dEADFAcE, 1000000000000000000000 [1e21])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x00000000000000000000000000000000dEADFAcE, value: 1000000000000000000000 [1e21])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x00000000000000000000000000000000dEADFAcE)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 100000000000000000000 [1e20])
    │   ├─ emit Approval(owner: 0x00000000000000000000000000000000dEADFAcE, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 100000000000000000000 [1e20])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x00000000000000000000000000000000dEADFAcE)
    │   └─ ← [Return]
    ├─ [368332] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 500, deadline: 3601 }))
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [8026] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 3000000 [3e6], 0)
    │   │   ├─ [4287] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 500) [staticcall]
    │   │   └─ ← [Return] 3150000000000000000 [3.15e18]
    │   ├─ emit IntentFinalized(intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e, intentHash: 0x4d91a0018459970b8be4cbce9094fc76baecfce6e3e12594e2d1c724c70d50a4, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], expectedAmount: 3150000000000000000 [3.15e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x00000000000000000000000000000000dEADFAcE, feeAmount: 90000 [9e4], id: 0xe8e591fcb5634d1cbc9a595bfb78241e, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x00000000000000000000000000000000dEADFAcE, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b }), PaymentContext({ paymentType: 0, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3150000000000000000 [3.15e18], intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e })
    ├─ [0] VM::assertTrue(true, "Intent IDs not unique - vulnerable to front-running") [staticcall]
    │   └─ ← [Return]
    ├─ [4536] CommerceProtocolIntegration::getPaymentContext(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3150000000000000000 [3.15e18], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [4536] CommerceProtocolIntegration::getPaymentContext(0xe8e591fcb5634d1cbc9a595bfb78241e) [staticcall]
    │   └─ ← [Return] PaymentContext({ paymentType: 0, user: 0x00000000000000000000000000000000dEADFAcE, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3150000000000000000 [3.15e18], intentId: 0xe8e591fcb5634d1cbc9a595bfb78241e })
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000002001, 0x00000000000000000000000000000000dEADFAcE, "User context corrupted by MEV") [staticcall]
    │   └─ ← [Revert] User context corrupted by MEV: 0x0000000000000000000000000000000000002001 != 0x00000000000000000000000000000000dEADFAcE
    └─ ← [Revert] User context corrupted by MEV: 0x0000000000000000000000000000000000002001 != 0x00000000000000000000000000000000dEADFAcE

[FAIL: Creator earnings don't match calculations: 0 != 94500000] test_PaymentCalculations_MathematicalPrecision() (gas: 1030143)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [1030143] CommerceProtocolIntegrationTest::test_PaymentCalculations_MathematicalPrecision()
    ├─ [0] VM::assertEq(5000000 [5e6], 5000000 [5e6], "Platform fee calculation incorrect") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(500000 [5e5], 500000 [5e5], "Operator fee calculation incorrect") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(94500000 [9.45e7], 94500000 [9.45e7], "Creator amount calculation incorrect") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 100000000 [1e8])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 100000000 [1e8])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [419968] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14389] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [386567] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000000 [1e8], true, "")
    │   ├─ [4285] PayPerView::completePurchase(0xd65c44ffd18370b995cea9ed13756093, 100000000 [1e8], true, "")
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919)
    │   ├─ [4210] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0xd65c44ffd18370b995cea9ed13756093, 2985000 [2.985e6], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000000 [1e8])
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919)
    │   ├─ emit RefundRequested(intentId: 0x4f72c37442074f23b97df6b689ba6418, user: 0x0000000000000000000000000000000000002001, amount: 3000000 [3e6], reason: "Content access failed: �Q}?\0\0\0\0\0\0\0\0\0\0\0\0!�Aa�\u{19}�\u{735}�&a����9�\u{1b}[�ط\u{1}K~�n�����'�B�L�u��ڊupB�>ř\u{19}")
    │   ├─ [78901] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910000 [2.91e6], 1, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910000 [2.91e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 100000000 [1e8], success: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [5261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 0, 0
    ├─ [0] VM::assertEq(0, 94500000 [9.45e7], "Creator earnings don't match calculations") [staticcall]
    │   └─ ← [Revert] Creator earnings don't match calculations: 0 != 94500000
    └─ ← [Revert] Creator earnings don't match calculations: 0 != 94500000

[FAIL: VOL tokens not deducted correctly: 0 != 20000000000000000000] test_PaymentExecution_MultiTokenComplexity() (gas: 1076886)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [1076886] CommerceProtocolIntegrationTest::test_PaymentExecution_MultiTokenComplexity()
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 0
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 20000000000000000000 [2e19])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 20000000000000000000 [2e19])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [464132] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 300, deadline: 2701 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [38426] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 3000000 [3e6], 0)
    │   │   ├─ [30187] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 300) [staticcall]
    │   │   └─ ← [Return] 3090000000000000000 [3.09e18]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 2701)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], deadline: 2701, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0xbc58edf9b4f44b4f328b0b1eb7e9cf95affbc28b18a201e1f791f8af44cda0ff, deadline: 2701)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], expectedAmount: 3090000000000000000 [3.09e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 2701, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3090000000000000000 [3.09e18], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0xbc58edf9b4f44b4f328b0b1eb7e9cf95affbc28b18a201e1f791f8af44cda0ff
    ├─ [0] VM::sign("<pk>", 0xbc58edf9b4f44b4f328b0b1eb7e9cf95affbc28b18a201e1f791f8af44cda0ff) [staticcall]
    │   └─ ← [Return] 27, 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc269, 0x73bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e056
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc26973bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e0561b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0xbc58edf9b4f44b4f328b0b1eb7e9cf95affbc28b18a201e1f791f8af44cda0ff, 27, 23322677197840360691716684572411093108410250671851533435712048430279799128681, 52348217665138058010014719931229941206324393797754657752298149581090393284694) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc26973bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e0561b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14389] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc26973bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e0561b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 2701, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x33902ae12094989adb20f85c2ea1b6824b817f54f575dedb330be1913cccc26973bc0a8d691927e23725ca85c1309b1fd688c7cc8758219d7769c2b51f69e0561b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [386567] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 20000000000000000000 [2e19], true, "")
    │   ├─ [4285] PayPerView::completePurchase(0xd65c44ffd18370b995cea9ed13756093, 20000000000000000000 [2e19], true, "")
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919)
    │   ├─ [4210] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0xd65c44ffd18370b995cea9ed13756093, 2985000 [2.985e6], MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 20000000000000000000 [2e19])
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919)
    │   ├─ emit RefundRequested(intentId: 0x4f72c37442074f23b97df6b689ba6418, user: 0x0000000000000000000000000000000000002001, amount: 3000000 [3e6], reason: "Content access failed: �Q}?\0\0\0\0\0\0\0\0\0\0\0\0!�Aa�\u{19}�\u{735}�&a����9�\u{1b}[�ط\u{1}K~�n�����'�B�L�u��ڊupB�>ř\u{19}")
    │   ├─ [78901] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910000 [2.91e6], 1, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910000 [2.91e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], amountPaid: 20000000000000000000 [2e19], success: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 0
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [0] VM::assertEq(0, 20000000000000000000 [2e19], "VOL tokens not deducted correctly") [staticcall]
    │   └─ ← [Revert] VOL tokens not deducted correctly: 0 != 20000000000000000000
    └─ ← [Revert] VOL tokens not deducted correctly: 0 != 20000000000000000000

[FAIL: panic: failed to convert value into enum type (0x21)] test_PaymentExecution_NormalConditions() (gas: 65779)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [65779] CommerceProtocolIntegrationTest::test_PaymentExecution_NormalConditions()
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [5261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 0, 0
    ├─ [28479] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[FAIL: Refund not properly recorded: 0x0000000000000000000000000000000000000000000000000000000000000000 != 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000] test_PaymentFailureRecovery_GracefulDegradation() (gas: 963861)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [963861] CommerceProtocolIntegrationTest::test_PaymentFailureRecovery_GracefulDegradation()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [419968] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14389] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [176861] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000000 [3e6], false, "External system error")
    │   ├─ emit RefundRequested(intentId: 0xbe72efc4694d9da8a06956e375bea7b8, user: 0x0000000000000000000000000000000000002001, amount: 3000000 [3e6], reason: "External system error")
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 3000000 [3e6], success: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [928] CommerceProtocolIntegration::hasActiveIntent(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false, "Failed intent not cleaned up") [staticcall]
    │   └─ ← [Return]
    ├─ [3277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false, "Access granted despite payment failure") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [127189] CommerceProtocolIntegration::requestRefund(0xd65c44ffd18370b995cea9ed13756093, "Payment processing failed")
    │   ├─ emit RefundRequested(intentId: 0x8d4483128cda9404c5278f95f8363eff, user: 0x0000000000000000000000000000000000002001, amount: 3000000 [3e6], reason: "Payment processing failed")
    │   └─ ← [Stop]
    ├─ [12861] CommerceProtocolIntegration::refundRequests(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x00000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0, "", 0, false
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000000000000000000000000000000000, 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000, "Refund not properly recorded") [staticcall]
    │   └─ ← [Revert] Refund not properly recorded: 0x0000000000000000000000000000000000000000000000000000000000000000 != 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000
    └─ ← [Revert] Refund not properly recorded: 0x0000000000000000000000000000000000000000000000000000000000000000 != 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000

[FAIL: Error != expected error: InvalidContentId() != InvalidContent()] test_PaymentIntentCreation_ComprehensiveValidation() (gas: 555942)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [555942] CommerceProtocolIntegrationTest::test_PaymentIntentCreation_ComprehensiveValidation()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 6000000000000000000 [6e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 6000000000000000000 [6e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [464132] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 200, deadline: 1801 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [38426] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 3000000 [3e6], 0)
    │   │   ├─ [30187] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 200) [staticcall]
    │   │   └─ ← [Return] 3060000000000000000 [3.06e18]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 1801)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], deadline: 1801, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x7ae9e13c34079567ea19c30c8ae090353e428ee92e78c0eff23d53b6b82d4552, deadline: 1801)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], expectedAmount: 3060000000000000000 [3.06e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 1801, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x2e234DAe75C793f67A35089C9d99245E1C58470b }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, expectedAmount: 3060000000000000000 [3.06e18], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1801, 1801) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: cb6e534400000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [9474] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000009999, contentId: 1, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 200, deadline: 1801 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000009999) [staticcall]
    │   │   └─ ← [Return] false
    │   └─ ← [Revert] InvalidCreator()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: ab4142cf00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [8900] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 999999 [9.999e5], paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 200, deadline: 1801 }))
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [980] ContentRegistry::getContent(999999 [9.999e5]) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != InvalidContent()

[PASS] test_PaymentIntentCreation_Success() (gas: 443238)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

[FAIL: next call did not revert as expected] test_ReentrancyDefense_MultiVectorAttacks() (gas: 866040)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [866040] CommerceProtocolIntegrationTest::test_ReentrancyDefense_MultiVectorAttacks()
    ├─ [0] VM::startPrank(0x00000000000000000000000000000000DeaDBeef)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000000 [1e21])
    │   ├─ emit Approval(owner: 0x00000000000000000000000000000000DeaDBeef, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000000 [1e21])
    │   └─ ← [Return] true
    ├─ [464132] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [38426] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 3000000 [3e6], 0)
    │   │   ├─ [30187] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 100) [staticcall]
    │   │   └─ ← [Return] 3030000000000000000 [3.03e18]
    │   ├─ emit IntentFinalized(intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f, intentHash: 0xe82ba8672457f789b1cf6de374d381c8eceed5e49b4dec0376b9065ce10dae22, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], expectedAmount: 3030000000000000000 [3.03e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x00000000000000000000000000000000DeaDBeef, feeAmount: 90000 [9e4], id: 0x6b1857f7d4cd6093dee84bbbdb1f131f, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x00000000000000000000000000000000DeaDBeef, token: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f }), PaymentContext({ paymentType: 0, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, expectedAmount: 3030000000000000000 [3.03e18], intentId: 0x6b1857f7d4cd6093dee84bbbdb1f131f })
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [346432] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [8026] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 3000000 [3e6], 0)
    │   │   ├─ [4287] MockQuoterV2::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x22a7C94543caa0e72439289e039B35a64C79A966, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Return] 1000000 [1e6], 79228162514264337593543950336 [7.922e28], 1, 100000 [1e5]
    │   │   └─ ← [Return] 3000000000000000000 [3e18]
    │   ├─ [1445] PriceOracle::applySlippage(3000000000000000000 [3e18], 100) [staticcall]
    │   │   └─ ← [Return] 3030000000000000000 [3.03e18]
    │   ├─ emit IntentFinalized(intentId: 0xdc33548a668b1a0de9b12966abc48cf2, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xdc33548a668b1a0de9b12966abc48cf2, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xdc33548a668b1a0de9b12966abc48cf2, intentHash: 0x13adf294d790c3f08c1b86bdcefdb7eb8c0c46f14d0f07bba12708f5f3155365, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xdc33548a668b1a0de9b12966abc48cf2, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], expectedAmount: 3030000000000000000 [3.03e18])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x00000000000000000000000000000000DeaDBeef, feeAmount: 90000 [9e4], id: 0xdc33548a668b1a0de9b12966abc48cf2, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x00000000000000000000000000000000DeaDBeef, token: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f }), PaymentContext({ paymentType: 0, user: 0x00000000000000000000000000000000DeaDBeef, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, expectedAmount: 3030000000000000000 [3.03e18], intentId: 0xdc33548a668b1a0de9b12966abc48cf2 })
    └─ ← [Revert] next call did not revert as expected

[FAIL: next call did not revert as expected] test_RoleManagement_Success() (gas: 49751)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [49751] CommerceProtocolIntegrationTest::test_RoleManagement_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [393] CommerceProtocolIntegration::SIGNER_ROLE() [staticcall]
    │   └─ ← [Return] 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70
    ├─ [30103] CommerceProtocolIntegration::grantRole(0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, 0x0000000000000000000000000000000000009999)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000009999, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [393] CommerceProtocolIntegration::SIGNER_ROLE() [staticcall]
    │   └─ ← [Return] 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70
    ├─ [1234] CommerceProtocolIntegration::hasRole(0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, 0x0000000000000000000000000000000000009999) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [393] CommerceProtocolIntegration::SIGNER_ROLE() [staticcall]
    │   └─ ← [Return] 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70
    └─ ← [Revert] next call did not revert as expected

[FAIL: next call did not revert as expected] test_SignatureReplayDefense_ComprehensiveProtection() (gas: 1552586)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [1552586] CommerceProtocolIntegrationTest::test_SignatureReplayDefense_ComprehensiveProtection()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [419968] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [14389] CommerceProtocolIntegration::executePaymentWithSignature(0xd65c44ffd18370b995cea9ed13756093)
    │   ├─ emit IntentReadyForExecution(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [386567] CommerceProtocolIntegration::processCompletedPayment(0xd65c44ffd18370b995cea9ed13756093, 0x0000000000000000000000000000000000002001, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000000 [3e6], true, "")
    │   ├─ [4285] PayPerView::completePurchase(0xd65c44ffd18370b995cea9ed13756093, 3000000 [3e6], true, "")
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919)
    │   ├─ [4210] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0xd65c44ffd18370b995cea9ed13756093, 2985000 [2.985e6], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000000 [3e6])
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919)
    │   ├─ emit RefundRequested(intentId: 0x4f72c37442074f23b97df6b689ba6418, user: 0x0000000000000000000000000000000000002001, amount: 3000000 [3e6], reason: "Content access failed: �Q}?\0\0\0\0\0\0\0\0\0\0\0\0!�Aa�\u{19}�\u{735}�&a����9�\u{1b}[�ط\u{1}K~�n�����'�B�L�u��ڊupB�>ř\u{19}")
    │   ├─ [78901] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2910000 [2.91e6], 1, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2910000 [2.91e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit PaymentCompleted(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, contentId: 1, paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], amountPaid: 3000000 [3e6], success: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 100000000 [1e8])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 100000000 [1e8])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [357068] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0x62192eda444f198c7fa4a1d16729db97, user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0x62192eda444f198c7fa4a1d16729db97, user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0x62192eda444f198c7fa4a1d16729db97, intentHash: 0xc48e97f00d68d8bedc8bf271e7b32f2dd6a7d6816291e2533a43fafc99ac241a, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0x62192eda444f198c7fa4a1d16729db97, user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002002, feeAmount: 90000 [9e4], id: 0x62192eda444f198c7fa4a1d16729db97, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002002, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0x62192eda444f198c7fa4a1d16729db97 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0x62192eda444f198c7fa4a1d16729db97) [staticcall]
    │   └─ ← [Return] 0xc48e97f00d68d8bedc8bf271e7b32f2dd6a7d6816291e2533a43fafc99ac241a
    ├─ [0] VM::sign("<pk>", 0xc48e97f00d68d8bedc8bf271e7b32f2dd6a7d6816291e2533a43fafc99ac241a) [staticcall]
    │   └─ ← [Return] 28, 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877, 0x255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f
    ├─ [0] VM::startPrank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [119252] CommerceProtocolIntegration::provideIntentSignature(0x62192eda444f198c7fa4a1d16729db97, 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f1c)
    │   ├─ [3000] PRECOMPILES::ecrecover(0xc48e97f00d68d8bedc8bf271e7b32f2dd6a7d6816291e2533a43fafc99ac241a, 28, 41148952279581397429142093024850209147523081160897668751225478448801896671351, 16902246452867072127088043140463337345065091325958609252556355550157408235407) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0x62192eda444f198c7fa4a1d16729db97, signature: 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f1c)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 8baa579f00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [14389] CommerceProtocolIntegration::executePaymentWithSignature(0x62192eda444f198c7fa4a1d16729db97)
    │   ├─ emit IntentReadyForExecution(intentId: 0x62192eda444f198c7fa4a1d16729db97, signature: 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f1c)
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002002, feeAmount: 90000 [9e4], id: 0x62192eda444f198c7fa4a1d16729db97, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x5af97b4ce5cd6109b8fabbbcffb1885392ab5b7a8d7e7b3db0a4bd3fba872877255e551d08ba3ff759add30a0158f7f21eceb2219a4eccdf1ca34dac23d6ef8f1c, prefix: 0x, sender: 0x0000000000000000000000000000000000002002, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 })
    └─ ← [Revert] next call did not revert as expected

[FAIL: Error != expected error: AccessControlUnauthorizedAccount(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122, 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70) != UnauthorizedSigner()] test_SignatureSystem_CryptographicSecurity() (gas: 619978)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [619978] CommerceProtocolIntegrationTest::test_SignatureSystem_CryptographicSecurity()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [419968] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [7702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ emit IntentFinalized(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, amount: 2910000 [2.91e6], deadline: 3601)
    │   ├─ emit IntentAuditRecord(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 3601, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xd65c44ffd18370b995cea9ed13756093, intentHash: 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, deadline: 3601)
    │   ├─ emit PaymentIntentCreated(intentId: 0xd65c44ffd18370b995cea9ed13756093, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, paymentType: 0, totalAmount: 3000000 [3e6], creatorAmount: 2910000 [2.91e6], platformFee: 75000 [7.5e4], operatorFee: 15000 [1.5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 3000000 [3e6])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 2910000 [2.91e6], deadline: 3601, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000002001, feeAmount: 90000 [9e4], id: 0xd65c44ffd18370b995cea9ed13756093, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000002001, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 0, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 75000 [7.5e4], creatorAmount: 2910000 [2.91e6], operatorFee: 15000 [1.5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 3000000 [3e6], intentId: 0xd65c44ffd18370b995cea9ed13756093 })
    ├─ [828] CommerceProtocolIntegration::intentHashes(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870
    ├─ [0] VM::assertTrue(true, "Intent hash not stored") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::sign("<pk>", 0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870) [staticcall]
    │   └─ ← [Return] 27, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f, 0x014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b4
    ├─ [0] VM::prank(0x2e988A386a799F506693793c6A5AF6B54dfAaBfB)
    │   └─ ← [Return]
    ├─ [123235] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   ├─ [3000] PRECOMPILES::ecrecover(0x1a7915a4ab34474360a976504848a3ef51be60262305352cadca1cbb28f02870, 27, 84919268285521278101500940832076821537255855063459543804541949561822614055471, 590741057987928676167845261577521175741812479721683099466309467581007388852) [staticcall]
    │   │   └─ ← [Return] 0x0000000000000000000000002e988a386a799f506693793c6a5af6b54dfaabfb
    │   ├─ emit IntentSigned(intentId: 0xd65c44ffd18370b995cea9ed13756093, signature: 0xbbbe9a425d84d384fe1cc953b7bfb6a2854acdf9bc2c98e9ef932c427d02ea2f014e58fba853817aca91e00ec3f0560bfd5c561d61ccc75f54d43f079259e0b41b)
    │   └─ ← [Stop]
    ├─ [903] CommerceProtocolIntegration::intentReadyForExecution(0xd65c44ffd18370b995cea9ed13756093) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true, "Valid signature rejected") [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::sign("<pk>", 0x1d21356f216675f792c9c1f31e46bc363744c67c73f57631ebaa318a43a55c13) [staticcall]
    │   └─ ← [Return] 27, 0x47048828689149a3c3576bb83d28096b192ad7d4f9ad4dd5afb395a58ca22b1c, 0x3ea7e0e4fc86f17265191633dee4aa36932856ba5cc224d74bba25688ddfce37
    ├─ [0] VM::startPrank(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: ca31867a00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [3981] CommerceProtocolIntegration::provideIntentSignature(0xd65c44ffd18370b995cea9ed13756093, 0x47048828689149a3c3576bb83d28096b192ad7d4f9ad4dd5afb395a58ca22b1c3ea7e0e4fc86f17265191633dee4aa36932856ba5cc224d74bba25688ddfce371b)
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122, 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70)
    └─ ← [Revert] Error != expected error: AccessControlUnauthorizedAccount(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122, 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70) != UnauthorizedSigner()

[FAIL: InvalidContent()] test_SystemLoad_StressConditions() (gas: 817008)
Logs:
  Deploying mock dependencies...
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Deploying core contracts...
  - PriceOracle deployed at: 0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
  - CreatorRegistry deployed at: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry deployed at: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView deployed at: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager deployed at: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration deployed at: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Core contracts deployed successfully
  Configuring contract permissions...
  Contract permissions configured
  Setting up test users...
  Test users set up with initial balances
  Setting up complete permission chain...
   ContentRegistry granted platform role in CreatorRegistry
   All platform roles verified
  Setting up cryptographic infrastructure...
   Cryptographic infrastructure configured
    - Real operator signer: 0x2e988A386a799F506693793c6A5AF6B54dfAaBfB
    - Malicious signer: 0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122
  Creating test data...
   Test data created successfully
    - Test content ID: 1
    - Premium content ID: 2

Traces:
  [817008] CommerceProtocolIntegrationTest::test_SystemLoad_StressConditions()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [32543] MockERC20::mint(0x0000000000000000000000000000000000009000, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009000, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009003, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009003, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009004, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009004, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009005, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009005, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009006, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009006, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009007, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009007, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009008, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009008, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000009009, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000009009, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000009000)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000009000, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000009000)
    │   └─ ← [Return]
    ├─ [368812] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 1, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 7201 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ emit IntentFinalized(intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814, user: 0x0000000000000000000000000000000000009000, creator: 0x0000000000000000000000000000000000001001, paymentType: 1, amount: 9700000 [9.7e6], deadline: 7201)
    │   ├─ emit IntentAuditRecord(intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814, user: 0x0000000000000000000000000000000000009000, creator: 0x0000000000000000000000000000000000001001, paymentType: 1, creatorAmount: 9700000 [9.7e6], platformFee: 250000 [2.5e5], operatorFee: 50000 [5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], deadline: 7201, createdAt: 1)
    │   ├─ emit IntentReadyForSigning(intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814, intentHash: 0x7df427f9cc035067f58c2766dbef0c84ea9ad8a8d47fa0d12bed65742671971e, deadline: 7201)
    │   ├─ emit PaymentIntentCreated(intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814, user: 0x0000000000000000000000000000000000009000, creator: 0x0000000000000000000000000000000000001001, paymentType: 1, totalAmount: 10000000 [1e7], creatorAmount: 9700000 [9.7e6], platformFee: 250000 [2.5e5], operatorFee: 50000 [5e4], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], expectedAmount: 10000000 [1e7])
    │   └─ ← [Return] TransferIntent({ recipientAmount: 9700000 [9.7e6], deadline: 7201, recipient: 0x0000000000000000000000000000000000001001, recipientCurrency: 0x22a7C94543caa0e72439289e039B35a64C79A966, refundDestination: 0x0000000000000000000000000000000000009000, feeAmount: 300000 [3e5], id: 0xe4a1f71f5d87aa6d6f857b86d735f814, operator: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B, signature: 0x, prefix: 0x, sender: 0x0000000000000000000000000000000000009000, token: 0x22a7C94543caa0e72439289e039B35a64C79A966 }), PaymentContext({ paymentType: 1, user: 0x0000000000000000000000000000000000009000, creator: 0x0000000000000000000000000000000000001001, contentId: 1, platformFee: 250000 [2.5e5], creatorAmount: 9700000 [9.7e6], operatorFee: 50000 [5e4], timestamp: 1, processed: false, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, expectedAmount: 10000000 [1e7], intentId: 0xe4a1f71f5d87aa6d6f857b86d735f814 })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000009001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 2000000 [2e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000009001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 2000000 [2e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000009001)
    │   └─ ← [Return]
    ├─ [51255] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001002, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 7201 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [33702] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Standard Content", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: [], isReported: false, reportCount: 0 })
    │   └─ ← [Revert] InvalidContent()
    └─ ← [Revert] InvalidContent()

Suite result: FAILED. 3 passed; 11 failed; 0 skipped; finished in 11.44ms (13.55ms CPU time)

Ran 10 test suites in 301.94ms (67.35ms CPU time): 23 tests passed, 53 failed, 0 skipped (76 total tests)

Failing tests:
Encountered 1 failing test in test/integration/BusinessScenarios.t.sol:BusinessScenariosTest
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] setUp() (gas: 0)

Encountered 1 failing test in test/integration/CommerceProtocolFlow.t.sol:CommerceProtocolFlowTest
[FAIL: assertion failed] setUp() (gas: 0)

Encountered 1 failing test in test/integration/CrossContractInteraction.t.sol:CrossContractInteractionTest
[FAIL: assertion failed] setUp() (gas: 0)

Encountered 1 failing test in test/integration/EndToEndFlow.t.sol:EndToEndFlowTest
[FAIL: assertion failed] setUp() (gas: 0)

Encountered 11 failing tests in test/unit/CommerceProtocolIntegration.t.sol:CommerceProtocolIntegrationTest
[FAIL: User context corrupted by MEV: 0x0000000000000000000000000000000000002001 != 0x00000000000000000000000000000000dEADFAcE] test_FrontRunningDefense_MEVResistance() (gas: 994013)
[FAIL: Creator earnings don't match calculations: 0 != 94500000] test_PaymentCalculations_MathematicalPrecision() (gas: 1030143)
[FAIL: VOL tokens not deducted correctly: 0 != 20000000000000000000] test_PaymentExecution_MultiTokenComplexity() (gas: 1076886)
[FAIL: panic: failed to convert value into enum type (0x21)] test_PaymentExecution_NormalConditions() (gas: 65779)
[FAIL: Refund not properly recorded: 0x0000000000000000000000000000000000000000000000000000000000000000 != 0xd65c44ffd18370b995cea9ed1375609300000000000000000000000000000000] test_PaymentFailureRecovery_GracefulDegradation() (gas: 963861)
[FAIL: Error != expected error: InvalidContentId() != InvalidContent()] test_PaymentIntentCreation_ComprehensiveValidation() (gas: 555942)
[FAIL: next call did not revert as expected] test_ReentrancyDefense_MultiVectorAttacks() (gas: 866040)
[FAIL: next call did not revert as expected] test_RoleManagement_Success() (gas: 49751)
[FAIL: next call did not revert as expected] test_SignatureReplayDefense_ComprehensiveProtection() (gas: 1552586)
[FAIL: Error != expected error: AccessControlUnauthorizedAccount(0xa698d53d0b38cF4A7C9371c7ea8bec4594B00122, 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70) != UnauthorizedSigner()] test_SignatureSystem_CryptographicSecurity() (gas: 619978)
[FAIL: InvalidContent()] test_SystemLoad_StressConditions() (gas: 817008)

Encountered 1 failing test in test/unit/ContentRegistry.t.sol:ContentRegistryTest
[FAIL: assertion failed] setUp() (gas: 0)

Encountered 15 failing tests in test/unit/CreatorRegistry.t.sol:CreatorRegistryTest
[FAIL: assertion failed] test_GetPlatformStats_Success() (gas: 191302)
[FAIL: assertion failed] test_MultipleCreators_Success() (gas: 191378)
[FAIL: assertion failed] test_PauseUnpause_Success() (gas: 191302)
[FAIL: assertion failed] test_RegisterCreator_AlreadyRegistered() (gas: 191303)
[FAIL: assertion failed] test_SetCreatorVerification_OnlyModerator() (gas: 191302)
[FAIL: assertion failed] test_SetCreatorVerification_RemoveVerification() (gas: 191303)
[FAIL: assertion failed] test_SetCreatorVerification_Success() (gas: 191302)
[FAIL: assertion failed] test_UpdateCreatorStats_OnlyPlatformContract() (gas: 191323)
[FAIL: assertion failed] test_UpdateCreatorStats_Success() (gas: 191348)
[FAIL: assertion failed] test_UpdateProfileData_EmptyData() (gas: 191345)
[FAIL: assertion failed] test_UpdateProfileData_Success() (gas: 191323)
[FAIL: assertion failed] test_UpdateSubscriptionPrice_InvalidPrice() (gas: 191367)
[FAIL: assertion failed] test_UpdateSubscriptionPrice_Success() (gas: 191301)
[FAIL: assertion failed] test_WithdrawCreatorEarnings_NoEarnings() (gas: 191322)
[FAIL: assertion failed] test_WithdrawCreatorEarnings_Success() (gas: 191366)

Encountered 1 failing test in test/unit/PayPerView.t.sol:PayPerViewTest
[FAIL: assertion failed] setUp() (gas: 0)

Encountered 20 failing tests in test/unit/PriceOracle.t.sol:PriceOracleTest
[FAIL: QuoteReverted()] test_GetETHPrice_DifferentAmounts() (gas: 41761)
[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed] test_GetETHPrice_QuoterFails() (gas: 70130)
[FAIL: QuoteReverted()] test_GetETHPrice_Success() (gas: 40870)
[FAIL: assertion failed: 0 != 1000000] test_GetMultipleQuotes_MissingPools() (gas: 126271)
[FAIL: assertion failed: 1 != 1995000000] test_GetMultipleQuotes_Success() (gas: 84728)
[FAIL: QuoteReverted()] test_GetTokenAmountForUSDC_AutoPoolFee() (gas: 73087)
[FAIL: QuoteReverted()] test_GetTokenAmountForUSDC_Success() (gas: 72946)
[FAIL: QuoteReverted()] test_GetTokenAmountForUSDC_USDCInput() (gas: 73253)
[FAIL: QuoteReverted()] test_GetTokenAmountForUSDC_ViaWETHRoute() (gas: 124024)
[FAIL: assertion failed: 1 != 1000000000] test_GetTokenPrice_AutoPoolFee() (gas: 50442)
[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: Quote failed] test_GetTokenPrice_QuoterFails() (gas: 68834)
[FAIL: assertion failed: 1 != 2000000000] test_GetTokenPrice_Success() (gas: 50224)
[FAIL: assertion failed: 1 != 2000000000] test_OptimalPoolFeeDetection() (gas: 50605)
[FAIL: QuoteReverted()] test_PriceCalculation_LargeAmounts() (gas: 40871)
[FAIL: QuoteReverted()] test_PriceCalculation_SmallAmounts() (gas: 40826)
[FAIL: QuoteReverted()] test_PriceCalculation_ZeroAmount() (gas: 40863)
[FAIL: QuoteReverted()] test_PriceConsistency() (gas: 40870)
[FAIL: assertion failed: 1 != 2010000000] test_SetCustomPoolFee_Success() (gas: 112459)
[FAIL: QuoteReverted()] test_TokenDecimalHandling() (gas: 42628)
[FAIL: Error != expected error: QuoteReverted() != MockQuoterV2: No liquidity] test_UnsupportedTokenPairs() (gas: 76373)

Encountered 1 failing test in test/unit/SubscriptionManager.t.sol:SubscriptionManagerTest
[FAIL: assertion failed] setUp() (gas: 0)

Encountered a total of 53 failing tests, 23 tests succeeded
